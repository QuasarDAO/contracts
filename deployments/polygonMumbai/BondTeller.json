{
  "address": "0x5063D5183CA088a60460a3ffc61843F47Cea2E56",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_idoDepository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quas",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sQUAS",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IQuasarAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bonder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bonder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "FERs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IQuasarAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonderInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "principal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "created",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_bonder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_principalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expires",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feo",
          "type": "address"
        }
      ],
      "name": "newBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "payoutInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedStakingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingStakingRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_unstake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IQuasarAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "setFEReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0bd2a00af645932a2c19e9e1eec15892a35a86059387f18ef04bc56055fc887",
  "receipt": {
    "to": null,
    "from": "0xA8D98f7a37574dc43e78818F70f7861d42749BA6",
    "contractAddress": "0x5063D5183CA088a60460a3ffc61843F47Cea2E56",
    "transactionIndex": 5,
    "gasUsed": "1238423",
    "logsBloom": "0x
    "blockHash": "0x6363b25852d509424447505abf91991e3d49e59adb32fa82619a15bc520b567c",
    "transactionHash": "0xd0bd2a00af645932a2c19e9e1eec15892a35a86059387f18ef04bc56055fc887",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 24213189,
        "transactionHash": "0xd0bd2a00af645932a2c19e9e1eec15892a35a86059387f18ef04bc56055fc887",
        "address": "0x5063D5183CA088a60460a3ffc61843F47Cea2E56",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000005e7ab75db9ca25decfb1a1b3ccc3905fee885f68"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x6363b25852d509424447505abf91991e3d49e59adb32fa82619a15bc520b567c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 24213189,
        "transactionHash": "0xd0bd2a00af645932a2c19e9e1eec15892a35a86059387f18ef04bc56055fc887",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a8d98f7a37574dc43e78818f70f7861d42749ba6",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002332b6974f1db10000000000000000000000000000000000000000000000000d9df96289fac2ee000000000000000000000000000000000000000000000545fbbdde25135868070000000000000000000000000000000000000000000000000d7ac6abf2aba53d000000000000000000000000000000000000000000000545fbe110dbaaa785b8",
        "logIndex": 15,
        "blockHash": "0x6363b25852d509424447505abf91991e3d49e59adb32fa82619a15bc520b567c"
      }
    ],
    "blockNumber": 24213189,
    "cumulativeGasUsed": "1448838",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x33cEEfa5547434F35549B31E29b5673BD162E4Ca",
    "0x909717EACA8F2331f259Cb7A2A63281dC3881665",
    "0x7584fD17b9FDC375367853A94D350A8E229c0924",
    "0xb4D2BD97f235Ac8a85C7DB14ae4C48b6fFBA0699",
    "0xBc1E6769446b6d603C626153bFF9b1cE6A307B06",
    "0x4DD12d1DA20F90B95687a12c83A65E68bFFc7d91",
    "0x5e7AB75Db9Ca25deCfB1a1B3CcC3905fEE885F68"
  ],
  "numDeployments": 1,
  "solcInputHash": "738a2335619ff75761cabf0c79c1824c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idoDepository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sQUAS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IQuasarAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bonder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FERs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IQuasarAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonderInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"principal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bonder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_principalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expires\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feo\",\"type\":\"address\"}],\"name\":\"newBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"payoutInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedStakingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingStakingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_unstake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IQuasarAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setFEReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"newBond(uint256,address,address,uint256,uint256,uint256,address)\":{\"params\":{\"_bid\":\"bond id\",\"_bonder\":\"address\",\"_expires\":\"uint256\",\"_feo\":\"address\",\"_payout\":\"uint256\",\"_principal\":\"address\",\"_principalPaid\":\"uint256\"}},\"payoutInfo(address,uint256)\":{\"params\":{\"_bid\":\"uint256\",\"_bonder\":\"address\"},\"returns\":{\"lockedPayout\":\"uint256, lockedStakingRewards uint256, pendingPayout uint256, pendingStakingRewards uint256\"}},\"percentVestedFor(address,uint256)\":{\"params\":{\"_bid\":\"uint256\",\"_bonder\":\"address\"},\"returns\":{\"percentVested_\":\"uint256\"}},\"redeem(address,uint256,bool)\":{\"params\":{\"_bid\":\"uint256\",\"_bonder\":\"address\",\"_unstake\":\"bool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"newBond(uint256,address,address,uint256,uint256,uint256,address)\":{\"notice\":\"add new bond payout to user data\"},\"payoutInfo(address,uint256)\":{\"notice\":\"calculate amount of QUAS available for claim for single bond\"},\"percentVestedFor(address,uint256)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"redeem(address,uint256,bool)\":{\"notice\":\"redeem bond for user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondTeller.sol\":\"BondTeller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/BondTeller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\nimport \\\"./interfaces/IsQUAS.sol\\\";\\nimport \\\"./interfaces/ITeller.sol\\\";\\n\\nimport \\\"./types/QuasarAccessControlled.sol\\\";\\n\\ncontract BondTeller is ITeller, QuasarAccessControlled {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IsQUAS;\\n\\n    /* ========== EVENTS =========== */\\n\\n    event BondCreated(address indexed bonder, uint256 payout, uint256 expires);\\n    event Redeemed(address indexed bonder, uint256 payout);\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyDepository() {\\n        require(msg.sender == depository || msg.sender == idoDepository, \\\"Only depository\\\");\\n        _;\\n    }\\n\\n    /* ========== STRUCTS ========== */\\n\\n    // Info for bond holder\\n    struct Bond {\\n        address principal; // token used to pay for bond\\n        uint256 principalPaid; // amount of principal token paid for bond\\n        uint256 payout; // QUAS remaining to be paid. agnostic balance\\n        uint256 bonded; // QUAS bonded \\n        uint256 vested; // Block timestamp when bond is vested\\n        uint256 created; // time bond was created\\n        uint256 redeemed; // time bond was redeemed\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address internal immutable depository; // contract where users deposit bonds\\n    address internal immutable idoDepository; // ido depository\\n    IStaking internal immutable staking; // contract to stake payout\\n    ITreasury internal immutable treasury;\\n    IERC20 internal immutable QUAS;\\n    IsQUAS internal immutable sQUAS; // payment token\\n\\n    mapping(address => mapping(uint256 => Bond)) public bonderInfo; // address => bond id => Bond\\n\\n    mapping(address => uint256) public FERs; // front end operator rewards\\n    uint256 public feReward;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _depository,\\n        address _idoDepository,\\n        address _staking,\\n        address _treasury,\\n        address _quas,\\n        address _sQUAS,\\n        address _authority\\n    ) QuasarAccessControlled(IQuasarAuthority(_authority)) {\\n        require(_depository != address(0), \\\"Zero address: Depository\\\");\\n        depository = _depository;\\n        require(_depository != address(0), \\\"Zero address: IDO Depository\\\");\\n        idoDepository = _idoDepository;\\n        require(_staking != address(0), \\\"Zero address: Staking\\\");\\n        staking = IStaking(_staking);\\n        require(_treasury != address(0), \\\"Zero address: Treasury\\\");\\n        treasury = ITreasury(_treasury);\\n        require(_quas != address(0), \\\"Zero address: QUAS\\\");\\n        QUAS = IERC20(_quas);\\n        require(_sQUAS != address(0), \\\"Zero address: sQUAS\\\");\\n        sQUAS = IsQUAS(_sQUAS);\\n    }\\n\\n    /* ========== DEPOSITORY FUNCTIONS ========== */\\n\\n    /**\\n     * @notice add new bond payout to user data\\n     * @param _bid bond id\\n     * @param _bonder address\\n     * @param _principal address\\n     * @param _principalPaid uint256\\n     * @param _payout uint256\\n     * @param _expires uint256\\n     * @param _feo address\\n     */\\n    function newBond(\\n        uint256 _bid,\\n        address _bonder,\\n        address _principal,\\n        uint256 _principalPaid,\\n        uint256 _payout,\\n        uint256 _expires,\\n        address _feo\\n    ) external override onlyDepository {\\n        uint256 reward = _payout.mul(feReward).div(10_000);\\n        treasury.mint(address(this), _payout.add(reward));\\n\\n        FERs[_feo] = FERs[_feo].add(reward); // front end operator reward\\n\\n        Bond memory bondInfo = bonderInfo[_bonder][_bid];\\n        bonderInfo[_bonder][_bid] = Bond({\\n            principal: _principal,\\n            principalPaid: bondInfo.principalPaid + _principalPaid,\\n            payout: bondInfo.payout + sQUAS.toG(_payout),\\n            bonded: bondInfo.bonded + _payout,\\n            vested: _expires,\\n            created: block.timestamp,\\n            redeemed: 0\\n        });\\n\\n        QUAS.approve(address(staking), _payout);\\n        staking.stake(address(this), _payout, false, true, true);\\n    }\\n\\n    /* ========== INTERACTABLE FUNCTIONS ========== */\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @param _bonder address\\n     *  @param _bid uint256\\n     *  @param _unstake bool\\n     */\\n    function redeem(address _bonder, uint256 _bid, bool _unstake) public override {\\n        (,,uint256 payout,) = payoutInfo(_bonder, _bid);\\n        if (payout != 0) {\\n            delete bonderInfo[_bonder][_bid];\\n            emit Redeemed(_bonder, payout);\\n            if (_unstake) {\\n                payUnstaked(_bonder, payout);\\n            } else {\\n                payStaked(_bonder, payout);\\n            }\\n        }\\n    }\\n\\n    // pay reward to front end operator\\n    function getReward() external override {\\n        uint256 reward = FERs[msg.sender];\\n        FERs[msg.sender] = 0;\\n        QUAS.safeTransfer(msg.sender, reward);\\n    }\\n\\n    /* ========== OWNABLE FUNCTIONS ========== */\\n\\n    // set reward for front end operator (4 decimals. 100 = 1%)\\n    function setFEReward(uint256 reward) external override onlyPolicy {\\n        feReward = reward;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     *  @notice send payout\\n     *  @param _amount uint256\\n     */\\n    function payUnstaked(address _bonder, uint256 _amount) internal {\\n        sQUAS.approve(address(staking), _amount);\\n        staking.unstake(address(this), _amount, false, true);\\n        QUAS.safeTransfer(_bonder, _amount);\\n    }\\n\\n    /**\\n     *  @notice send payout\\n     *  @param _amount uint256\\n     */\\n    function payStaked(address _bonder, uint256 _amount) internal {\\n        sQUAS.safeTransfer(_bonder, _amount);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // PAYOUT\\n\\n    /**\\n     * @notice calculate amount of QUAS available for claim for single bond\\n     * @param _bonder address\\n     * @param _bid uint256\\n     * @return lockedPayout uint256, lockedStakingRewards uint256, pendingPayout uint256, pendingStakingRewards uint256\\n     */\\n    function payoutInfo(address _bonder, uint256 _bid) public view override \\n        returns (uint256 lockedPayout, uint256 lockedStakingRewards, uint256 pendingPayout, uint256 pendingStakingRewards) {\\n\\n        uint256 gpayout = bonderInfo[_bonder][_bid].payout;\\n        uint256 bonded = bonderInfo[_bonder][_bid].bonded;\\n        uint256 payout = sQUAS.fromG(gpayout);\\n        uint256 stakingRewards;\\n        if (bonded < payout) {\\n            stakingRewards = payout.sub(bonded);\\n        }\\n\\n        if (bonderInfo[_bonder][_bid].redeemed == 0 && \\n            bonderInfo[_bonder][_bid].vested <= block.timestamp) {\\n            pendingPayout = payout;\\n            pendingStakingRewards = stakingRewards;\\n        } else {\\n            lockedPayout = payout;\\n            lockedStakingRewards = stakingRewards;\\n        }\\n    }\\n\\n    // VESTING\\n\\n    /**\\n     * @notice calculate how far into vesting a depositor is\\n     * @param _bonder address\\n     * @param _bid uint256\\n     * @return percentVested_ uint256\\n     */\\n    function percentVestedFor(address _bonder, uint256 _bid) public view override returns (uint256 percentVested_) {\\n        Bond memory bond = bonderInfo[_bonder][_bid];\\n\\n        uint256 timeSince = block.timestamp.sub(bond.created);\\n        uint256 term = bond.vested.sub(bond.created);\\n\\n        percentVested_ = timeSince.mul(1e9).div(term);\\n    }\\n}\\n\",\"keccak256\":\"0x66dc52b0c4d563a6d8a864236bd1b207adb36bcfdc2cbbf100f42e2ddaf24ac8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\n\\ninterface IOwnable {\\n  function owner() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\",\"keccak256\":\"0x67b482434e366a3ff98d5ea407a569399f331df2de8ea7e2a7f38af675057771\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IQuasarAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.7.5;\\n\\ninterface IQuasarAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\",\"keccak256\":\"0xf134da7c5193076031295a4282e4f49b0ed75316e5215b020574387dca90bbce\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x14cd989f593cb35ea3fc8f93b8245902feaa5007ccb925aedb1d8d8e740d8f50\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITeller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITeller {\\n    function newBond( \\n        uint256 _bid,\\n        address _bonder, \\n        address _principal,\\n        uint _principalPaid,\\n        uint _payout, \\n        uint _expires,\\n        address _feo\\n    ) external;\\n    function redeem(address _bonder, uint256 _bid, bool _unstake) external;\\n    function getReward() external;\\n    function setFEReward(uint256 reward) external;\\n    function payoutInfo(address _bonder, uint256 _index) external view returns (uint256 lockedPayout, uint256 lockedStakingRewards, uint256 pendingPayout, uint256 pendingStakingRewards);\\n    function percentVestedFor(address _bonder, uint256 _index) external view returns (uint256 percentVested_);\\n}\\n\",\"keccak256\":\"0xad977bbdeebaa119df95ae2e7d6d4f9e9293131ce434e79c3956e4c4be0c0420\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IsQUAS.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IsQUAS is IERC20 {\\n    function rebase( uint256 ohmProfit_, uint epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance( uint amount ) external view returns ( uint );\\n\\n    function balanceForGons( uint gons ) external view returns ( uint );\\n\\n    function index() external view returns ( uint );\\n\\n    function toG(uint amount) external view returns (uint);\\n\\n    function fromG(uint amount) external view returns (uint);\\n\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x0107bfb7d79fc05f3376c0e1633e68c1893967fcff8e25fb5802880b22e0e1d5\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"},\"contracts/types/QuasarAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IQuasarAuthority.sol\\\";\\n\\nabstract contract QuasarAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IQuasarAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IQuasarAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IQuasarAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IQuasarAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0xc166b81db04bd197b45f5f9460daaa0ff887083cd60d07d5b58a379d585df5fa\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610180604052600c6101408190526b15539055551213d49256915160a21b61016090815262000032916000919062000374565b503480156200004057600080fd5b50604051620018fb380380620018fb833981810160405260e08110156200006657600080fd5b50805160208201516040808401516060850151608086015160a087015160c090970151600180546001600160a01b0319166001600160a01b038316908117909155945196979596939592949193909182917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0387166200013a576040805162461bcd60e51b815260206004820152601860248201527f5a65726f20616464726573733a204465706f7369746f72790000000000000000604482015290519081900360640190fd5b6001600160601b0319606088901b166080526001600160a01b038716620001a8576040805162461bcd60e51b815260206004820152601c60248201527f5a65726f20616464726573733a2049444f204465706f7369746f727900000000604482015290519081900360640190fd5b6001600160601b0319606087901b1660a0526001600160a01b03851662000216576040805162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a205374616b696e670000000000000000000000604482015290519081900360640190fd5b6001600160601b0319606086901b1660c0526001600160a01b03841662000284576040805162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20547265617375727900000000000000000000604482015290519081900360640190fd5b6001600160601b0319606085901b1660e0526001600160a01b038316620002e7576040805162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a205155415360701b604482015290519081900360640190fd5b6001600160601b0319606084901b16610100526001600160a01b03821662000356576040805162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a20735155415300000000000000000000000000604482015290519081900360640190fd5b5060601b6001600160601b0319166101205250620004209350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003ac5760008555620003f7565b82601f10620003c757805160ff1916838001178555620003f7565b82800160010185558215620003f7579182015b82811115620003f7578251825591602001919060010190620003da565b506200040592915062000409565b5090565b5b808211156200040557600081556001016200040a565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c611457620004a46000398061033e5280610b44528061100052806111b45250806104af5280610c8d528061117c5250806109cf525080610cbc5280610d8c528061102f52806110f852508061093352508061090152506114576000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80636e979c6a11610081578063b3b554d11161005b578063b3b554d11461029b578063bf7e214f146102c1578063fbd030c0146102e5576100c9565b80636e979c6a146101e95780637a9e5e4b14610227578063a729e9c11461024d576100c9565b80633d18b912116100b25780633d18b9121461018e5780633d7319e2146101985780634458a14c146101b5576100c9565b8063015ee036146100ce5780632c1133d414610120575b600080fd5b6100fa600480360360408110156100e457600080fd5b506001600160a01b0381351690602001356102ed565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61014c6004803603604081101561013657600080fd5b506001600160a01b038135169060200135610445565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b610196610494565b005b610196600480360360208110156101ae57600080fd5b50356104e1565b610196600480360360608110156101cb57600080fd5b506001600160a01b038135169060208101359060400135151561060c565b610215600480360360408110156101ff57600080fd5b506001600160a01b0381351690602001356106e5565b60408051918252519081900360200190f35b6101966004803603602081101561023d57600080fd5b50356001600160a01b03166107b3565b610196600480360360e081101561026357600080fd5b508035906001600160a01b036020820135811691604081013582169160608201359160808101359160a08201359160c00135166108f6565b610215600480360360208110156102b157600080fd5b50356001600160a01b0316610e0d565b6102c9610e1f565b604080516001600160a01b039092168252519081900360200190f35b610215610e2e565b6001600160a01b038281166000908152600260208181526040808420868552825280842092830154600390930154815163b8fbd53360e01b81526004810185905291519495869586958695909486937f0000000000000000000000000000000000000000000000000000000000000000169263b8fbd53392602480840193919291829003018186803b15801561038257600080fd5b505afa158015610396573d6000803e3d6000fd5b505050506040513d60208110156103ac57600080fd5b505190506000818310156103c7576103c48284610e34565b90505b6001600160a01b038a1660009081526002602090815260408083208c845290915290206006015415801561042157506001600160a01b038a1660009081526002602090815260408083208c84529091529020600401544210155b1561043157819550809450610438565b8197508096505b5050505092959194509250565b6002602081815260009384526040808520909152918352912080546001820154928201546003830154600484015460058501546006909501546001600160a01b03909416959492939192909187565b3360008181526003602052604081208054919055906104de907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610e7f565b50565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d602081101561055957600080fd5b50516000906001600160a01b031633146106065760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b50509250505060405180910390fd5b50600455565b600061061884846102ed565b5092505050806000146106df576001600160a01b03841660008181526002602081815260408084208885528252808420805473ffffffffffffffffffffffffffffffffffffffff1916815560018101859055928301849055600383018490556004830184905560058301849055600690920192909255805184815290517f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b9369929181900390910190a281156106d5576106d08482610ffe565b6106df565b6106df84826111a7565b50505050565b60006106ef6113e3565b506001600160a01b0380841660009081526002602081815260408084208785528252808420815160e0810183528154909616865260018101549286019290925291810154918401919091526003810154606084015260048101546080840152600581015460a0840181905260069091015460c0840152610770904290610e34565b9050600061078f8360a001518460800151610e3490919063ffffffff16565b90506107a9816107a384633b9aca006111db565b90611234565b9695505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561080157600080fd5b505afa158015610815573d6000803e3d6000fd5b505050506040513d602081101561082b57600080fd5b50516000906001600160a01b0316331461089e5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f75780601f106105cc576101008083540402835291602001916105f7565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806109555750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6109a6576040805162461bcd60e51b815260206004820152600f60248201527f4f6e6c79206465706f7369746f72790000000000000000000000000000000000604482015290519081900360640190fd5b60006109c36127106107a3600454876111db90919063ffffffff16565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f19306109ff8785611276565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610a4557600080fd5b505af1158015610a59573d6000803e3d6000fd5b5050506001600160a01b038316600090815260036020526040902054610a80915082611276565b6001600160a01b038316600090815260036020526040902055610aa16113e3565b506001600160a01b0380881660009081526002602081815260408084208d8552825292839020835160e0808201865282548716825260018301548285019081529483015482870152600383015460608301526004808401546080840152600584015460a084015260069093015460c0830152855190810186528c8716815293518b0184840152845163012b7d0360e31b81529182018a90528451909593948501937f0000000000000000000000000000000000000000000000000000000000000000169263095be8189260248082019391829003018186803b158015610b8657600080fd5b505afa158015610b9a573d6000803e3d6000fd5b505050506040513d6020811015610bb057600080fd5b810190808051906020019092919050505083604001510181526020018683606001510181526020018581526020014281526020016000815250600260008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601559050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610d2257600080fd5b505af1158015610d36573d6000803e3d6000fd5b505050506040513d6020811015610d4c57600080fd5b505060408051637d5fcafb60e01b815230600482015260248101879052600060448201819052600160648301819052608483015291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692637d5fcafb9260a480820193602093909283900390910190829087803b158015610dd657600080fd5b505af1158015610dea573d6000803e3d6000fd5b505050506040513d6020811015610e0057600080fd5b5050505050505050505050565b60036020526000908152604090205481565b6001546001600160a01b031681565b60045481565b6000610e7683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112d0565b90505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610f115780518252601f199092019160209182019101610ef2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610f73576040519150601f19603f3d011682016040523d82523d6000602084013e610f78565b606091505b5091509150818015610fa6575080511580610fa65750808060200190516020811015610fa357600080fd5b50515b610ff7576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050506040513d60208110156110bf57600080fd5b50506040805163990966d560e01b8152306004820152602481018390526000604482018190526001606483015291516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263990966d592608480820193602093909283900390910190829087803b15801561114257600080fd5b505af1158015611156573d6000803e3d6000fd5b505050506040513d602081101561116c57600080fd5b506111a390506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610e7f565b5050565b6111a36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610e7f565b6000826111ea57506000610e79565b828202828482816111f757fe5b0414610e765760405162461bcd60e51b815260040180806020018281038252602181526020018061142a6021913960400191505060405180910390fd5b6000610e7683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611367565b600082820183811015610e76576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818484111561135f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561132457818101518382015260200161130c565b50505050905090810190601f1680156113515780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836113b65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132457818101518382015260200161130c565b5060008385816113c257fe5b0490508385816113ce57fe5b068185020185146113db57fe5b949350505050565b6040518060e0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80636e979c6a11610081578063b3b554d11161005b578063b3b554d11461029b578063bf7e214f146102c1578063fbd030c0146102e5576100c9565b80636e979c6a146101e95780637a9e5e4b14610227578063a729e9c11461024d576100c9565b80633d18b912116100b25780633d18b9121461018e5780633d7319e2146101985780634458a14c146101b5576100c9565b8063015ee036146100ce5780632c1133d414610120575b600080fd5b6100fa600480360360408110156100e457600080fd5b506001600160a01b0381351690602001356102ed565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61014c6004803603604081101561013657600080fd5b506001600160a01b038135169060200135610445565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b610196610494565b005b610196600480360360208110156101ae57600080fd5b50356104e1565b610196600480360360608110156101cb57600080fd5b506001600160a01b038135169060208101359060400135151561060c565b610215600480360360408110156101ff57600080fd5b506001600160a01b0381351690602001356106e5565b60408051918252519081900360200190f35b6101966004803603602081101561023d57600080fd5b50356001600160a01b03166107b3565b610196600480360360e081101561026357600080fd5b508035906001600160a01b036020820135811691604081013582169160608201359160808101359160a08201359160c00135166108f6565b610215600480360360208110156102b157600080fd5b50356001600160a01b0316610e0d565b6102c9610e1f565b604080516001600160a01b039092168252519081900360200190f35b610215610e2e565b6001600160a01b038281166000908152600260208181526040808420868552825280842092830154600390930154815163b8fbd53360e01b81526004810185905291519495869586958695909486937f0000000000000000000000000000000000000000000000000000000000000000169263b8fbd53392602480840193919291829003018186803b15801561038257600080fd5b505afa158015610396573d6000803e3d6000fd5b505050506040513d60208110156103ac57600080fd5b505190506000818310156103c7576103c48284610e34565b90505b6001600160a01b038a1660009081526002602090815260408083208c845290915290206006015415801561042157506001600160a01b038a1660009081526002602090815260408083208c84529091529020600401544210155b1561043157819550809450610438565b8197508096505b5050505092959194509250565b6002602081815260009384526040808520909152918352912080546001820154928201546003830154600484015460058501546006909501546001600160a01b03909416959492939192909187565b3360008181526003602052604081208054919055906104de907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610e7f565b50565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d602081101561055957600080fd5b50516000906001600160a01b031633146106065760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b50509250505060405180910390fd5b50600455565b600061061884846102ed565b5092505050806000146106df576001600160a01b03841660008181526002602081815260408084208885528252808420805473ffffffffffffffffffffffffffffffffffffffff1916815560018101859055928301849055600383018490556004830184905560058301849055600690920192909255805184815290517f4896181ff8f4543cc00db9fe9b6fb7e6f032b7eb772c72ab1ec1b4d2e03b9369929181900390910190a281156106d5576106d08482610ffe565b6106df565b6106df84826111a7565b50505050565b60006106ef6113e3565b506001600160a01b0380841660009081526002602081815260408084208785528252808420815160e0810183528154909616865260018101549286019290925291810154918401919091526003810154606084015260048101546080840152600581015460a0840181905260069091015460c0840152610770904290610e34565b9050600061078f8360a001518460800151610e3490919063ffffffff16565b90506107a9816107a384633b9aca006111db565b90611234565b9695505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561080157600080fd5b505afa158015610815573d6000803e3d6000fd5b505050506040513d602081101561082b57600080fd5b50516000906001600160a01b0316331461089e5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105f75780601f106105cc576101008083540402835291602001916105f7565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806109555750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6109a6576040805162461bcd60e51b815260206004820152600f60248201527f4f6e6c79206465706f7369746f72790000000000000000000000000000000000604482015290519081900360640190fd5b60006109c36127106107a3600454876111db90919063ffffffff16565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f19306109ff8785611276565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610a4557600080fd5b505af1158015610a59573d6000803e3d6000fd5b5050506001600160a01b038316600090815260036020526040902054610a80915082611276565b6001600160a01b038316600090815260036020526040902055610aa16113e3565b506001600160a01b0380881660009081526002602081815260408084208d8552825292839020835160e0808201865282548716825260018301548285019081529483015482870152600383015460608301526004808401546080840152600584015460a084015260069093015460c0830152855190810186528c8716815293518b0184840152845163012b7d0360e31b81529182018a90528451909593948501937f0000000000000000000000000000000000000000000000000000000000000000169263095be8189260248082019391829003018186803b158015610b8657600080fd5b505afa158015610b9a573d6000803e3d6000fd5b505050506040513d6020811015610bb057600080fd5b810190808051906020019092919050505083604001510181526020018683606001510181526020018581526020014281526020016000815250600260008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008b815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c082015181600601559050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610d2257600080fd5b505af1158015610d36573d6000803e3d6000fd5b505050506040513d6020811015610d4c57600080fd5b505060408051637d5fcafb60e01b815230600482015260248101879052600060448201819052600160648301819052608483015291516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692637d5fcafb9260a480820193602093909283900390910190829087803b158015610dd657600080fd5b505af1158015610dea573d6000803e3d6000fd5b505050506040513d6020811015610e0057600080fd5b5050505050505050505050565b60036020526000908152604090205481565b6001546001600160a01b031681565b60045481565b6000610e7683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112d0565b90505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610f115780518252601f199092019160209182019101610ef2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610f73576040519150601f19603f3d011682016040523d82523d6000602084013e610f78565b606091505b5091509150818015610fa6575080511580610fa65750808060200190516020811015610fa357600080fd5b50515b610ff7576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050506040513d60208110156110bf57600080fd5b50506040805163990966d560e01b8152306004820152602481018390526000604482018190526001606483015291516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263990966d592608480820193602093909283900390910190829087803b15801561114257600080fd5b505af1158015611156573d6000803e3d6000fd5b505050506040513d602081101561116c57600080fd5b506111a390506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610e7f565b5050565b6111a36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610e7f565b6000826111ea57506000610e79565b828202828482816111f757fe5b0414610e765760405162461bcd60e51b815260040180806020018281038252602181526020018061142a6021913960400191505060405180910390fd5b6000610e7683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611367565b600082820183811015610e76576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818484111561135f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561132457818101518382015260200161130c565b50505050905090810190601f1680156113515780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836113b65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561132457818101518382015260200161130c565b5060008385816113c257fe5b0490508385816113ce57fe5b068185020185146113db57fe5b949350505050565b6040518060e0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "newBond(uint256,address,address,uint256,uint256,uint256,address)": {
        "params": {
          "_bid": "bond id",
          "_bonder": "address",
          "_expires": "uint256",
          "_feo": "address",
          "_payout": "uint256",
          "_principal": "address",
          "_principalPaid": "uint256"
        }
      },
      "payoutInfo(address,uint256)": {
        "params": {
          "_bid": "uint256",
          "_bonder": "address"
        },
        "returns": {
          "lockedPayout": "uint256, lockedStakingRewards uint256, pendingPayout uint256, pendingStakingRewards uint256"
        }
      },
      "percentVestedFor(address,uint256)": {
        "params": {
          "_bid": "uint256",
          "_bonder": "address"
        },
        "returns": {
          "percentVested_": "uint256"
        }
      },
      "redeem(address,uint256,bool)": {
        "params": {
          "_bid": "uint256",
          "_bonder": "address",
          "_unstake": "bool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "newBond(uint256,address,address,uint256,uint256,uint256,address)": {
        "notice": "add new bond payout to user data"
      },
      "payoutInfo(address,uint256)": {
        "notice": "calculate amount of QUAS available for claim for single bond"
      },
      "percentVestedFor(address,uint256)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "redeem(address,uint256,bool)": {
        "notice": "redeem bond for user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11094,
        "contract": "contracts/BondTeller.sol:BondTeller",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11096,
        "contract": "contracts/BondTeller.sol:BondTeller",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IQuasarAuthority)7384"
      },
      {
        "astId": 1180,
        "contract": "contracts/BondTeller.sol:BondTeller",
        "label": "bonderInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)1162_storage))"
      },
      {
        "astId": 1184,
        "contract": "contracts/BondTeller.sol:BondTeller",
        "label": "FERs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1186,
        "contract": "contracts/BondTeller.sol:BondTeller",
        "label": "feReward",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IQuasarAuthority)7384": {
        "encoding": "inplace",
        "label": "contract IQuasarAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bond)1162_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BondTeller.Bond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bond)1162_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bond)1162_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BondTeller.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)1162_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bond)1162_storage": {
        "encoding": "inplace",
        "label": "struct BondTeller.Bond",
        "members": [
          {
            "astId": 1149,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1151,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "principalPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1153,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "payout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1155,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "bonded",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1157,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "vested",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1159,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "created",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1161,
            "contract": "contracts/BondTeller.sol:BondTeller",
            "label": "redeemed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}