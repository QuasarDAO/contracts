{
  "address": "0x33cEEfa5547434F35549B31E29b5673BD162E4Ca",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IQuasarAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "CreateBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "afterBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "beforeBond",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "IDs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_principal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_calculator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_capacityIsPayout",
          "type": "bool"
        }
      ],
      "name": "addBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IQuasarAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "principal_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calculator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBondCreatedAt_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "bondTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTerm_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonds",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "principal",
          "type": "address"
        },
        {
          "internalType": "contract IBondingCalculator",
          "name": "calculator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "controlVariable",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fixedTerm",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "vestingTerm",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "conclusion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuasarBondDepository.Terms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "termsSet",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "capacityIsPayout",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDecay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feo",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "deprecateBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "payoutForAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IQuasarAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teller",
          "type": "address"
        }
      ],
      "name": "setTeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_conclusion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        }
      ],
      "name": "setTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_BID",
          "type": "uint256"
        }
      ],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teller",
      "outputs": [
        {
          "internalType": "contract ITeller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8286d661ad16ed4a11a2bd22e044209f351b0987c8d119d4d98d4ce2827f48a0",
  "receipt": {
    "to": null,
    "from": "0xA8D98f7a37574dc43e78818F70f7861d42749BA6",
    "contractAddress": "0x33cEEfa5547434F35549B31E29b5673BD162E4Ca",
    "transactionIndex": 8,
    "gasUsed": "2509557",
    "logsBloom": "0x00000000100000001000000010000000000000000000000000800000000000000000000000400040000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000104000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000008008000000080000000000000000000200000000000000002000000000000000000000000000000000000000000004000000000000000000001100000000000000000000000000000100040000000000000000000000000000008000000000000000000000000000000000000100000",
    "blockHash": "0x4725178554972201a4603e045d648a9cdf031f9216cb26108e41264ce7813679",
    "transactionHash": "0x8286d661ad16ed4a11a2bd22e044209f351b0987c8d119d4d98d4ce2827f48a0",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 24213187,
        "transactionHash": "0x8286d661ad16ed4a11a2bd22e044209f351b0987c8d119d4d98d4ce2827f48a0",
        "address": "0x33cEEfa5547434F35549B31E29b5673BD162E4Ca",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000005e7ab75db9ca25decfb1a1b3ccc3905fee885f68"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x4725178554972201a4603e045d648a9cdf031f9216cb26108e41264ce7813679"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 24213187,
        "transactionHash": "0x8286d661ad16ed4a11a2bd22e044209f351b0987c8d119d4d98d4ce2827f48a0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a8d98f7a37574dc43e78818f70f7861d42749ba6",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000047536e2ae1ed630000000000000000000000000000000000000000000000000e117fe1ece1c2ee000000000000000000000000000000000000000000000545fae7ba54713ef7cf0000000000000000000000000000000000000000000000000dca2c73c1ffd58b000000000000000000000000000000000000000000000545fb2f0dc29c20e532",
        "logIndex": 22,
        "blockHash": "0x4725178554972201a4603e045d648a9cdf031f9216cb26108e41264ce7813679"
      }
    ],
    "blockNumber": 24213187,
    "cumulativeGasUsed": "3072101",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb4D2BD97f235Ac8a85C7DB14ae4C48b6fFBA0699",
    "0x5e7AB75Db9Ca25deCfB1a1B3CcC3905fEE885F68"
  ],
  "numDeployments": 1,
  "solcInputHash": "738a2335619ff75761cabf0c79c1824c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IQuasarAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"CreateBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"afterBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"beforeBond\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IDs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_principal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_capacityIsPayout\",\"type\":\"bool\"}],\"name\":\"addBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IQuasarAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"principal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calculator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBondCreatedAt_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"bondTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"principal\",\"type\":\"address\"},{\"internalType\":\"contract IBondingCalculator\",\"name\":\"calculator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conclusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct QuasarBondDepository.Terms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"termsSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"capacityIsPayout\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDecay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feo\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deprecateBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"payoutForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IQuasarAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teller\",\"type\":\"address\"}],\"name\":\"setTeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conclusion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"}],\"name\":\"setTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BID\",\"type\":\"uint256\"}],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teller\",\"outputs\":[{\"internalType\":\"contract ITeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBond(address,address,uint256,bool)\":{\"params\":{\"_calculator\":\"address\",\"_capacity\":\"uint\",\"_capacityIsPayout\":\"bool\",\"_principal\":\"address\"}},\"bondInfo(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"calculator_\":\"address\",\"lastBondCreatedAt_\":\"uint\",\"principal_\":\"address\",\"totalDebt_\":\"uint\"}},\"bondPrice(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"price_\":\"uint\"}},\"bondTerms(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"controlVariable_\":\"uint\",\"maxDebt_\":\"uint\",\"maxPayout_\":\"uint\",\"minimumPrice_\":\"uint\",\"vestingTerm_\":\"uint\"}},\"currentDebt(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"debtDecay(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"decay_\":\"uint\"}},\"debtRatio(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address,uint256,address)\":{\"params\":{\"_BID\":\"uint\",\"_amount\":\"uint\",\"_depositor\":\"address\",\"_feo\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint256\"}},\"deprecateBond(uint256)\":{\"params\":{\"_id\":\"uint\"}},\"maxPayout(uint256)\":{\"params\":{\"_BID\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256,uint256)\":{\"params\":{\"_BID\":\"uint\",\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"payoutForAmount(uint256,uint256)\":{\"params\":{\"_BID\":\"uint\",\"_amount\":\"uint\"}},\"setTeller(address)\":{\"params\":{\"_teller\":\"address\"}},\"setTerms(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_conclusion\":\"uint\",\"_controlVariable\":\"uint\",\"_expiration\":\"uint\",\"_fixedTerm\":\"bool\",\"_id\":\"uint\",\"_initialDebt\":\"uint\",\"_maxDebt\":\"uint\",\"_maxPayout\":\"uint\",\"_minimumPrice\":\"uint\",\"_vestingTerm\":\"uint\"}},\"standardizedDebtRatio(uint256)\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBond(address,address,uint256,bool)\":{\"notice\":\"creates a new bond type\"},\"bondInfo(uint256)\":{\"notice\":\"returns data about a bond type\"},\"bondPrice(uint256)\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD(uint256)\":{\"notice\":\"converts bond price to DAI value\"},\"bondTerms(uint256)\":{\"notice\":\"returns terms for a bond type\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to QUAS supply\"},\"deposit(uint256,uint256,address,uint256,address)\":{\"notice\":\"deposit bond\"},\"deprecateBond(uint256)\":{\"notice\":\"disable existing bond\"},\"maxPayout(uint256)\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of treasury value\"},\"payoutForAmount(uint256,uint256)\":{\"notice\":\"payout due for amount of token\"},\"setTeller(address)\":{\"notice\":\"set teller contract\"},\"setTerms(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"set minimum price for new bond\"},\"standardizedDebtRatio(uint256)\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"QuasarBondDepository\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/FixedPoint.sol\\\";\\nimport \\\"./libraries/Address.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./types/QuasarAccessControlled.sol\\\";\\n\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IBondingCalculator.sol\\\";\\nimport \\\"./interfaces/ITeller.sol\\\";\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\n\\ncontract QuasarBondDepository is QuasarAccessControlled {\\n  using FixedPoint for *;\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  /* ======== EVENTS ======== */\\n\\n  event beforeBond(uint256 bid, uint256 price, uint256 internalPrice, uint256 debtRatio);\\n  event CreateBond(uint256 bid, uint256 amount, uint256 payout, uint256 expires);\\n  event afterBond(uint256 bid, uint256 price, uint256 internalPrice, uint256 debtRatio);\\n\\n  /* ======== STRUCTS ======== */\\n\\n  // Info about each type of bond\\n  struct Bond {\\n    IERC20 principal; // token to accept as payment\\n    IBondingCalculator calculator; // contract to value principal\\n    Terms terms; // terms of bond\\n    bool termsSet; // have terms been set\\n    uint256 capacity; // capacity remaining\\n    bool capacityIsPayout; // capacity limit is for payout vs principal\\n    uint256 totalDebt; // total debt from bond\\n    uint256 lastDecay; // last block timestamp when debt was decayed\\n  }\\n\\n  // Info for creating new bonds\\n  struct Terms {\\n    uint256 controlVariable; // scaling variable for price\\n    bool fixedTerm; // fixed term or fixed expiration\\n    uint256 vestingTerm; // term in seconds (fixed-term)\\n    uint256 expiration; // timestamp bond matures (fixed-expiration)\\n    uint256 conclusion; // timestamp bond no longer offered\\n    uint256 minimumPrice; // vs principal value\\n    uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n    uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\n  }\\n\\n  /* ======== STATE VARIABLES ======== */\\n\\n  mapping(uint256 => Bond) public bonds;\\n  address[] public IDs; // bond IDs\\n\\n  ITeller public teller; // handles payment\\n\\n  ITreasury immutable treasury;\\n\\n  /* ======== CONSTRUCTOR ======== */\\n\\n  constructor(\\n    address _treasury, \\n    address _authority\\n  ) QuasarAccessControlled(IQuasarAuthority(_authority)) {\\n    require(_treasury != address(0));\\n    treasury = ITreasury(_treasury);\\n  }\\n\\n  /* ======== POLICY FUNCTIONS ======== */\\n\\n  /**\\n   * @notice creates a new bond type\\n   * @param _principal address\\n   * @param _calculator address\\n   * @param _capacity uint\\n   * @param _capacityIsPayout bool\\n   */\\n  function addBond(\\n    address _principal,\\n    address _calculator,\\n    uint256 _capacity,\\n    bool _capacityIsPayout\\n  ) external onlyGuardian returns (uint256 id_) {\\n    Terms memory terms = Terms({\\n      controlVariable: 0, \\n      fixedTerm: false, \\n      vestingTerm: 0, \\n      expiration: 0, \\n      conclusion: 0, \\n      minimumPrice: 0, \\n      maxPayout: 0, \\n      maxDebt: 0\\n    });\\n\\n    bonds[IDs.length] = Bond({\\n      principal: IERC20(_principal), \\n      calculator: IBondingCalculator(_calculator), \\n      terms: terms, \\n      termsSet: false, \\n      totalDebt: 0, \\n      lastDecay: block.timestamp, \\n      capacity: _capacity, \\n      capacityIsPayout: _capacityIsPayout\\n    });\\n\\n    id_ = IDs.length;\\n    IDs.push(_principal);\\n  }\\n\\n  /**\\n   * @notice set minimum price for new bond\\n   * @param _id uint\\n   * @param _controlVariable uint\\n   * @param _fixedTerm bool\\n   * @param _vestingTerm uint\\n   * @param _expiration uint\\n   * @param _conclusion uint\\n   * @param _minimumPrice uint\\n   * @param _maxPayout uint\\n   * @param _maxDebt uint\\n   * @param _initialDebt uint\\n   */\\n  function setTerms(\\n    uint256 _id,\\n    uint256 _controlVariable,\\n    bool _fixedTerm,\\n    uint256 _vestingTerm,\\n    uint256 _expiration,\\n    uint256 _conclusion,\\n    uint256 _minimumPrice,\\n    uint256 _maxPayout,\\n    uint256 _maxDebt,\\n    uint256 _initialDebt\\n  ) external onlyGuardian {\\n    require(!bonds[_id].termsSet, \\\"Already set\\\");\\n\\n    Terms memory terms = Terms({\\n      controlVariable: _controlVariable, \\n      fixedTerm: _fixedTerm, \\n      vestingTerm: _vestingTerm, \\n      expiration: _expiration, \\n      conclusion: _conclusion, \\n      minimumPrice: _minimumPrice, \\n      maxPayout: _maxPayout, \\n      maxDebt: _maxDebt\\n    });\\n\\n    bonds[_id].terms = terms;\\n    bonds[_id].totalDebt = _initialDebt;\\n    bonds[_id].termsSet = true;\\n  }\\n\\n  /**\\n   * @notice disable existing bond\\n   * @param _id uint\\n   */\\n  function deprecateBond(uint256 _id) external onlyGuardian {\\n    bonds[_id].capacity = 0;\\n  }\\n\\n  /**\\n   * @notice set teller contract\\n   * @param _teller address\\n   */\\n  function setTeller(address _teller) external onlyGovernor {\\n    require(address(teller) == address(0));\\n    require(_teller != address(0));\\n    teller = ITeller(_teller);\\n  }\\n\\n  /* ======== MUTABLE FUNCTIONS ======== */\\n\\n  /**\\n   * @notice deposit bond\\n   * @param _amount uint\\n   * @param _maxPrice uint\\n   * @param _depositor address\\n   * @param _BID uint\\n   * @param _feo address\\n   * @return uint256\\n   */\\n  function deposit(\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _depositor,\\n    uint256 _BID,\\n    address _feo\\n  ) external returns (uint256) {\\n    require(_depositor != address(0), \\\"Invalid address\\\");\\n\\n    Bond memory info = bonds[_BID];\\n\\n    require(bonds[_BID].termsSet, \\\"Not initialized\\\");\\n    require(block.timestamp < info.terms.conclusion, \\\"Bond concluded\\\");\\n\\n    emit beforeBond(_BID, bondPriceInUSD(_BID), bondPrice(_BID), debtRatio(_BID));\\n\\n    decayDebt(_BID);\\n\\n    require(info.totalDebt <= info.terms.maxDebt, \\\"Max debt exceeded\\\");\\n    require(_maxPrice >= _bondPrice(_BID), \\\"Slippage limit: more than max price\\\"); // slippage protection\\n\\n    uint256 value = treasury.tokenValue(address(info.principal), _amount);\\n    uint256 payout = payoutFor(value, _BID); // payout to bonder is computed\\n\\n    // ensure there is remaining capacity for bond\\n    if (info.capacityIsPayout) {\\n      // capacity in payout terms\\n      require(info.capacity >= payout, \\\"Bond concluded\\\");\\n      info.capacity = info.capacity.sub(payout);\\n    } else {\\n      // capacity in principal terms\\n      require(info.capacity >= _amount, \\\"Bond concluded\\\");\\n      info.capacity = info.capacity.sub(_amount);\\n    }\\n\\n    require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 QUAS ( underflow protection )\\n    require(payout <= maxPayout(_BID), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n    info.principal.safeTransferFrom(msg.sender, address(this), _amount); // move funds from sender\\n    info.principal.approve(address(treasury), _amount);\\n    treasury.deposit(_amount, address(info.principal), value);  // deposit funds to treasury\\n\\n    bonds[_BID].totalDebt = info.totalDebt.add(value); // increase total debt\\n\\n    uint256 expiration = info.terms.vestingTerm.add(block.timestamp);\\n    if (!info.terms.fixedTerm) {\\n      expiration = info.terms.expiration;\\n    }\\n\\n    // user info stored with teller\\n    teller.newBond(_BID, _depositor, address(info.principal), _amount, payout, expiration, _feo);\\n\\n    emit CreateBond(_BID, _amount, payout, expiration);\\n\\n    return payout;\\n  }\\n\\n  /* ======== INTERNAL FUNCTIONS ======== */\\n\\n  /**\\n   * @notice reduce total debt\\n   * @param _BID uint\\n   */\\n  function decayDebt(uint256 _BID) internal {\\n    bonds[_BID].totalDebt = bonds[_BID].totalDebt.sub(debtDecay(_BID));\\n    bonds[_BID].lastDecay = block.timestamp;\\n  }\\n\\n  /* ======== VIEW FUNCTIONS ======== */\\n\\n  // BOND TYPE INFO\\n\\n  /**\\n   * @notice returns data about a bond type\\n   * @param _BID uint\\n   * @return principal_ address\\n   * @return calculator_ address\\n   * @return totalDebt_ uint\\n   * @return lastBondCreatedAt_ uint\\n   */\\n  function bondInfo(uint256 _BID)\\n    external\\n    view\\n    returns (\\n      address principal_,\\n      address calculator_,\\n      uint256 totalDebt_,\\n      uint256 lastBondCreatedAt_\\n    )\\n  {\\n    Bond memory info = bonds[_BID];\\n    principal_ = address(info.principal);\\n    calculator_ = address(info.calculator);\\n    totalDebt_ = info.totalDebt;\\n    lastBondCreatedAt_ = info.lastDecay;\\n  }\\n\\n  /**\\n   * @notice returns terms for a bond type\\n   * @param _BID uint\\n   * @return controlVariable_ uint\\n   * @return vestingTerm_ uint\\n   * @return minimumPrice_ uint\\n   * @return maxPayout_ uint\\n   * @return maxDebt_ uint\\n   */\\n  function bondTerms(uint256 _BID)\\n    external\\n    view\\n    returns (\\n      uint256 controlVariable_,\\n      uint256 vestingTerm_,\\n      uint256 minimumPrice_,\\n      uint256 maxPayout_,\\n      uint256 maxDebt_\\n    )\\n  {\\n    Terms memory terms = bonds[_BID].terms;\\n    controlVariable_ = terms.controlVariable;\\n    vestingTerm_ = terms.vestingTerm;\\n    minimumPrice_ = terms.minimumPrice;\\n    maxPayout_ = terms.maxPayout;\\n    maxDebt_ = terms.maxDebt;\\n  }\\n\\n  // PAYOUT\\n\\n  /**\\n   * @notice determine maximum bond size\\n   * @param _BID uint\\n   * @return uint\\n   */\\n  function maxPayout(uint256 _BID) public view returns (uint256) {\\n    return treasury.baseSupply().mul(bonds[_BID].terms.maxPayout).div(100000);\\n  }\\n\\n  /**\\n   * @notice payout due for amount of treasury value\\n   * @param _value uint\\n   * @param _BID uint\\n   * @return uint\\n   */\\n  function payoutFor(uint256 _value, uint256 _BID) public view returns (uint256) {\\n    return FixedPoint.fraction(_value, bondPrice(_BID)).decode112with18().div(1e16);\\n  }\\n\\n  /**\\n   * @notice payout due for amount of token\\n   * @param _amount uint\\n   * @param _BID uint\\n   */\\n  function payoutForAmount(uint256 _amount, uint256 _BID) public view returns (uint256) {\\n    address principal = address(bonds[_BID].principal);\\n    return payoutFor(treasury.tokenValue(principal, _amount), _BID);\\n  }\\n\\n  // BOND PRICE\\n\\n  /**\\n   * @notice calculate current bond premium\\n   * @param _BID uint\\n   * @return price_ uint\\n   */\\n  function bondPrice(uint256 _BID) public view returns (uint256 price_) {\\n    price_ = bonds[_BID].terms.controlVariable.mul(debtRatio(_BID)).add(1000000000).div(1e7);\\n    if (price_ < bonds[_BID].terms.minimumPrice) {\\n      price_ = bonds[_BID].terms.minimumPrice;\\n    }\\n  }\\n\\n  /**\\n   * @notice calculate current bond price and remove floor if above\\n   * @param _BID uint\\n   * @return price_ uint\\n   */\\n  function _bondPrice(uint256 _BID) internal returns (uint256 price_) {\\n    Bond memory info = bonds[_BID];\\n    price_ = info.terms.controlVariable.mul(debtRatio(_BID)).add(1000000000).div(1e7);\\n    if (price_ < info.terms.minimumPrice) {\\n      price_ = info.terms.minimumPrice;\\n    } else if (info.terms.minimumPrice != 0) {\\n      bonds[_BID].terms.minimumPrice = 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice converts bond price to DAI value\\n   * @param _BID uint\\n   * @return price_ uint\\n   */\\n  function bondPriceInUSD(uint256 _BID) public view returns (uint256 price_) {\\n    Bond memory bond = bonds[_BID];\\n    if (address(bond.calculator) != address(0)) {\\n      price_ = bondPrice(_BID).mul(bond.calculator.markdown(address(bond.principal))).div(100);\\n    } else {\\n      price_ = bondPrice(_BID).mul(10**IERC20Metadata(address(bond.principal)).decimals()).div(100);\\n    }\\n  }\\n\\n  // DEBT\\n\\n  /**\\n   * @notice calculate current ratio of debt to QUAS supply\\n   * @param _BID uint\\n   * @return debtRatio_ uint\\n   */\\n  function debtRatio(uint256 _BID) public view returns (uint256 debtRatio_) {\\n    debtRatio_ = FixedPoint.fraction(currentDebt(_BID).mul(1e9), treasury.baseSupply()).decode112with18().div(1e18); \\n  }\\n\\n  /**\\n   * @notice debt ratio in same terms for reserve or liquidity bonds\\n   * @return uint\\n   */\\n  function standardizedDebtRatio(uint256 _BID) public view returns (uint256) {\\n    Bond memory bond = bonds[_BID];\\n    if (address(bond.calculator) != address(0)) {\\n      return debtRatio(_BID).mul(bond.calculator.markdown(address(bond.principal))).div(1e9);\\n    } else {\\n      return debtRatio(_BID);\\n    }\\n  }\\n\\n  /**\\n   * @notice calculate debt factoring in decay\\n   * @param _BID uint\\n   * @return uint\\n   */\\n  function currentDebt(uint256 _BID) public view returns (uint256) {\\n    return bonds[_BID].totalDebt.sub(debtDecay(_BID));\\n  }\\n\\n  /**\\n   * @notice amount to decay total debt by\\n   * @param _BID uint\\n   * @return decay_ uint\\n   */\\n  function debtDecay(uint256 _BID) public view returns (uint256 decay_) {\\n    Bond memory bond = bonds[_BID];\\n    uint256 blocksSinceLast = block.timestamp.sub(bond.lastDecay);\\n    decay_ = bond.totalDebt.mul(blocksSinceLast).div(bond.terms.vestingTerm);\\n    if (decay_ > bond.totalDebt) {\\n      decay_ = bond.totalDebt;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa728fd04a65b6ede56b7bbcd8135bb5966ed458b28f74787742563e48ad4dfe8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IBondingCalculator {\\n    function markdown( address _LP ) external view returns ( uint );\\n\\n    function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\n}\",\"keccak256\":\"0x393a8003b5dc1ed925fdafb1c8d5165ac076ad1956a828a4a101d683a86d0657\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x6dfa58ba4a241b2201f3ecb3ba26345ce4dd66f0a553f18b2a284341f5aacd72\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IQuasarAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.7.5;\\n\\ninterface IQuasarAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\",\"keccak256\":\"0xf134da7c5193076031295a4282e4f49b0ed75316e5215b020574387dca90bbce\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITeller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITeller {\\n    function newBond( \\n        uint256 _bid,\\n        address _bonder, \\n        address _principal,\\n        uint _principalPaid,\\n        uint _payout, \\n        uint _expires,\\n        address _feo\\n    ) external;\\n    function redeem(address _bonder, uint256 _bid, bool _unstake) external;\\n    function getReward() external;\\n    function setFEReward(uint256 reward) external;\\n    function payoutInfo(address _bonder, uint256 _index) external view returns (uint256 lockedPayout, uint256 lockedStakingRewards, uint256 pendingPayout, uint256 pendingStakingRewards);\\n    function percentVestedFor(address _bonder, uint256 _index) external view returns (uint256 percentVested_);\\n}\\n\",\"keccak256\":\"0xad977bbdeebaa119df95ae2e7d6d4f9e9293131ce434e79c3956e4c4be0c0420\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): replace with OZ implementation.\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n    //     require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    //     return _functionCallWithValue(target, data, value, errorMessage);\\n    // }\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n  /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns(string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = '0';\\n        _addr[1] = 'x';\\n\\n        for(uint256 i = 0; i < 20; i++) {\\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n\\n    }\\n}\",\"keccak256\":\"0x6f876c8caf225f86ec550117c4b1a6586353f7af3a1147355caf0016dc1672c4\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\n\\nlibrary Babylonian {\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\n\\nlibrary FixedPoint {\\n\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n\\n        return uint(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n    \\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\",\"keccak256\":\"0xab2a4545666244ce3564fa3e7c81f808a6041539fe96968d60b72a20d672c354\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x99da15d5a821951f2b2f507e0f0129ce3ed3a87b6455c6b32c78980c0fdc1ed7\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"},\"contracts/types/QuasarAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IQuasarAuthority.sol\\\";\\n\\nabstract contract QuasarAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IQuasarAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IQuasarAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IQuasarAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IQuasarAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0xc166b81db04bd197b45f5f9460daaa0ff887083cd60d07d5b58a379d585df5fa\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0604052600c60a08190526b15539055551213d49256915160a21b60c09081526200002f9160009190620000d6565b503480156200003d57600080fd5b5060405162002d9438038062002d9483398101604081905262000060916200019f565b600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038216620000bf57600080fd5b5060601b6001600160601b031916608052620001d6565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200010e576000855562000159565b82601f106200012957805160ff191683800117855562000159565b8280016001018555821562000159579182015b82811115620001595782518255916020019190600101906200013c565b50620001679291506200016b565b5090565b5b808211156200016757600081556001016200016c565b80516001600160a01b03811681146200019a57600080fd5b919050565b60008060408385031215620001b2578182fd5b620001bd8362000182565b9150620001cd6020840162000182565b90509250929050565b60805160601c612b876200020d60003980610a6e5280610c0c5280610ca252806111ee52806115e15280611c555250612b876000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80636a6c575d116100d8578063aab114641161008c578063bf7e214f11610066578063bf7e214f14610321578063effc99cd14610329578063f1b7dc781461033c57610177565b8063aab11464146102d7578063abbf4b17146102fb578063bcb296671461030e57610177565b8063805b5bc2116100bd578063805b5bc21461029e578063856519b5146102b1578063a817712a146102c457610177565b80636a6c575d146102785780637a9e5e4b1461028b57610177565b806333ff77221161012f57806357edab4e1161011457806357edab4e146102295780635f1c17c01461023e5780636551df2c1461026557610177565b806333ff77221461020157806357e333ba1461021657610177565b8063172c44ec11610160578063172c44ec146101c8578063187dcb85146101db57806319a64215146101ee57610177565b80630170bbd91461017c57806310fc6172146101a5575b600080fd5b61018f61018a3660046125f7565b61034f565b60405161019c9190612a6e565b60405180910390f35b6101b86101b3366004612665565b6106aa565b60405161019c94939291906127bd565b61018f6101d6366004612665565b6107b6565b61018f6101e93660046126b6565b61082d565b61018f6101fc366004612665565b610e4a565b61021461020f3660046125db565b611082565b005b61018f610224366004612665565b6111c6565b610231611283565b60405161019c91906127a9565b61025161024c366004612665565b611292565b60405161019c9897969594939291906127ff565b610214610273366004612665565b611342565b61018f610286366004612695565b611442565b6102146102993660046125db565b611470565b61018f6102ac366004612695565b6115b3565b61018f6102bf366004612665565b611678565b6102146102d236600461270b565b611822565b6102ea6102e5366004612665565b6119f3565b60405161019c959493929190612aea565b61018f610309366004612665565b611a89565b61018f61031c366004612665565b611bcf565b610231611bf5565b610231610337366004612665565b611c04565b61018f61034a366004612665565b611c2e565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a9320916004808301926020929190829003018186803b15801561039457600080fd5b505afa1580156103a8573d6000803e3d6000fd5b505050506040513d60208110156103be57600080fd5b50516000906001600160a01b0316331461046b5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b820191906000526020600020905b81548152906001019060200180831161043f57829003601f168201915b50509250505060405180910390fd5b50610474612535565b60405180610100016040528060008152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509050604051806101000160405280876001600160a01b03168152602001866001600160a01b031681526020018281526020016000151581526020018581526020018415158152602001600081526020014281525060026000600380549050815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816002016000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701555050606082015181600a0160006101000a81548160ff021916908315150217905550608082015181600b015560a082015181600c0160006101000a81548160ff02191690831515021790555060c082015181600d015560e082015181600e015590505060038054905091506003869080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555050949350505050565b6000806000806106b861257c565b50505060009283525050600260208181526040928390208351610100808201865282546001600160a01b03908116835260018401541682850190815286519182018752948301548152600383015460ff90811615159482019490945260048301548187015260058301546060808301919091526006840154608080840191909152600785015460a080850191909152600886015460c080860191909152600987015460e08087019190915299860194909452600a8601548716151592850192909252600b85015490840152600c840154909416151593820193909352600d820154928101839052600e90910154938101849052519151919391929091565b60006107f8629896806107f2633b9aca006107ec6107d387611c2e565b6000888152600260208190526040909120015490611ce4565b90611d3d565b90611d97565b60008381526002602052604090206007015490915081101561082857506000818152600260205260409020600701545b919050565b60006001600160a01b03841661085e5760405162461bcd60e51b8152600401610855906128aa565b60405180910390fd5b61086661257c565b5060008381526002602081815260408084208151610100808201845282546001600160a01b0390811683526001840154168286015283519081018452828601548152600383015460ff90811615158287015260048401548286015260058401546060808401919091526006850154608080850191909152600786015460a080860191909152600887015460c080870191909152600988015460e08088019190915298870195909552600a870154841680151593870193909352600b87015491860191909152600c860154909216151591840191909152600d84015491830191909152600e909201549281019290925293879052919052906109795760405162461bcd60e51b815260040161085590612918565b80604001516080015142106109a05760405162461bcd60e51b81526004016108559061294f565b7f8f0783a6c1cb2d85a903a2db160118a565dc172b5e4da3d75733b7b5995a0fa1846109cb86610e4a565b6109d4876107b6565b6109dd88611c2e565b6040516109ed9493929190612acf565b60405180910390a16109fe84611dd9565b806040015160e001518160c001511115610a2a5760405162461bcd60e51b8152600401610855906128e1565b610a3384611e1d565b861015610a525760405162461bcd60e51b8152600401610855906129f4565b805160405163f182178360e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163f182178391610aa3918c906004016127e6565b60206040518083038186803b158015610abb57600080fd5b505afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af3919061267d565b90506000610b018287611442565b90508260a0015115610b4a578083608001511015610b315760405162461bcd60e51b81526004016108559061294f565b6080830151610b409082611f85565b6080840152610b83565b8883608001511015610b6e5760405162461bcd60e51b81526004016108559061294f565b6080830151610b7d908a611f85565b60808401525b62989680811015610ba65760405162461bcd60e51b8152600401610855906129bd565b610baf866111c6565b811115610bce5760405162461bcd60e51b815260040161085590612a37565b8251610be5906001600160a01b031633308c611fc7565b825160405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610c36907f0000000000000000000000000000000000000000000000000000000000000000908d906004016127e6565b602060405180830381600087803b158015610c5057600080fd5b505af1158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190612649565b50825160405163bc157ac160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163bc157ac191610cd9918d918790600401612ab0565b602060405180830381600087803b158015610cf357600080fd5b505af1158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b919061267d565b5060c0830151610d3b9083611d3d565b600087815260026020526040808220600d01929092558482015190910151610d639042611d3d565b9050836040015160200151610d7d57506040830151606001515b600460009054906101000a90046001600160a01b03166001600160a01b031663a729e9c1888a87600001518e87878d6040518863ffffffff1660e01b8152600401610dce9796959493929190612a77565b600060405180830381600087803b158015610de857600080fd5b505af1158015610dfc573d6000803e3d6000fd5b505050507f6671c52657539dfe32e25a5646170ce70ec6adfebf197a90845ab3ec1e42569c878b8484604051610e359493929190612acf565b60405180910390a15098975050505050505050565b6000610e5461257c565b506000828152600260208181526040928390208351610100808201865282546001600160a01b0390811683526001840154811683860190815287519283018852958401548252600384015460ff90811615159583019590955260048401548288015260058401546060808401919091526006850154608080850191909152600786015460a080860191909152600887015460c080870191909152600988015460e0808801919091529a870195909552600a8701548816151592860192909252600b86015490850152600c850154909516151594830194909452600d83015490820152600e909101549381019390935290511615610fed57610fe660646107f283602001516001600160a01b03166332da80a385600001516040518263ffffffff1660e01b8152600401610f8791906127a9565b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd7919061267d565b610fe0876107b6565b90611ce4565b915061107c565b61107960646107f283600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561103257600080fd5b505afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612782565b60ff16600a0a610fe0876107b6565b91505b50919050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d057600080fd5b505afa1580156110e4573d6000803e3d6000fd5b505050506040513d60208110156110fa57600080fd5b50516000906001600160a01b0316331461116d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b506004546001600160a01b03161561118457600080fd5b6001600160a01b03811661119757600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061127d620186a06107f260026000868152602001908152602001600020600201600601547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b815260040160206040518083038186803b15801561124557600080fd5b505afa158015611259573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe0919061267d565b92915050565b6004546001600160a01b031681565b60026020818152600092835260409283902080546001820154855161010081018752948301548552600383015460ff9081161515948601949094526004830154958501959095526005820154606085015260068201546080850152600782015460a0850152600882015460c0850152600982015460e0850152600a820154600b830154600c840154600d850154600e909501546001600160a01b0394851698909416969592831694919392169188565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561139057600080fd5b505afa1580156113a4573d6000803e3d6000fd5b505050506040513d60208110156113ba57600080fd5b50516000906001600160a01b0316331461142d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b506000908152600260205260408120600b0155565b6000611469662386f26fc100006107f26114648661145f876107b6565b61213a565b6122bc565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d60208110156114e857600080fd5b50516000906001600160a01b0316331461155b5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60008181526002602052604080822054905163f182178360e01b81526001600160a01b0391821691611670917f00000000000000000000000000000000000000000000000000000000000000009091169063f18217839061161a90859089906004016127e6565b60206040518083038186803b15801561163257600080fd5b505afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a919061267d565b84611442565b949350505050565b600061168261257c565b506000828152600260208181526040928390208351610100808201865282546001600160a01b0390811683526001840154811683860190815287519283018852958401548252600384015460ff90811615159583019590955260048401548288015260058401546060808401919091526006850154608080850191909152600786015460a080860191909152600887015460c080870191909152600988015460e0808801919091529a870195909552600a8701548816151592860192909252600b86015490850152600c850154909516151594830194909452600d83015490820152600e90910154938101939093529051161561181957611811633b9aca006107f283602001516001600160a01b03166332da80a385600001516040518263ffffffff1660e01b81526004016117b891906127a9565b60206040518083038186803b1580156117d057600080fd5b505afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611808919061267d565b610fe087611c2e565b915050610828565b61181183611c2e565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d602081101561189a57600080fd5b50516000906001600160a01b0316331461190d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b5060008a8152600260205260409020600a015460ff16156119405760405162461bcd60e51b815260040161085590612986565b611948612535565b506040805161010081018252998a529715156020808b019182528a8a0198895260608b0197885260808b0196875260a08b0195865260c08b0194855260e08b0193845260009b8c5260029081905298909a20985197890197909755975160038801805491151560ff1992831617905594516004880155925160058701559051600686015551600785015551600884015592516009830155600d820155600a0180549091166001179055565b6000806000806000611a03612535565b505050600093845250506002602081815260409384902084516101008101865292810154808452600382015460ff1615159284019290925260048101549483018590526005810154606084015260068101546080840152600781015460a08401819052600882015460c0850181905260099092015460e090940184905291959193509190565b6000611a9361257c565b5060008281526002602081815260408084208151610100808201845282546001600160a01b0390811683526001840154168286015283519081018452948201548552600382015460ff90811615159486019490945260048201548584015260058201546060808701919091526006830154608080880191909152600784015460a080890191909152600885015460c0808a0191909152600986015460e0808b019190915296850198909852600a8501548716151592840192909252600b84015490830152600c830154909416151593810193909352600d81015493830193909352600e909201549181018290529190611b8d904290611f85565b9050611bb28260400151604001516107f2838560c00151611ce490919063ffffffff16565b92508160c00151831115611bc8578160c0015192505b5050919050565b600061127d611bdd83611a89565b6000848152600260205260409020600d015490611f85565b6001546001600160a01b031681565b60038181548110611c1457600080fd5b6000918252602090912001546001600160a01b0316905081565b600061127d670de0b6b3a76400006107f2611464611c53633b9aca00610fe088611bcf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b815260040160206040518083038186803b158015611cac57600080fd5b505afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f919061267d565b600082611cf35750600061127d565b82820282848281611d0057fe5b04146114695760405162461bcd60e51b8152600401808060200182810382526021815260200180612b5a6021913960400191505060405180910390fd5b600082820183811015611469576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061146983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122d4565b611dfd611de582611a89565b6000838152600260205260409020600d015490611f85565b600091825260026020526040909120600d81019190915542600e90910155565b6000611e2761257c565b506000828152600260208181526040928390208351610100808201865282546001600160a01b0390811683526001840154168285015285519081018652938201548452600382015460ff90811615159385019390935260048201548486015260058201546060808601919091526006830154608080870191909152600784015460a080880191909152600885015460c080890191909152600986015460e0808a019190915298850197909752600a8501548616151592840192909252600b84015490830152600c830154909316151592810192909252600d81015492820192909252600e9091015491810191909152611f3d629896806107f2633b9aca006107ec611f3188611c2e565b60408701515190611ce4565b9150806040015160a00151821015611f5f57806040015160a00151915061107c565b604081015160a001511561107c5760008381526002602052604081206007015550919050565b600061146983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612385565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b6020831061204c5780518252601f19909201916020918201910161202d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120ae576040519150601f19603f3d011682016040523d82523d6000602084013e6120b3565b606091505b50915091508180156120e15750805115806120e157508080602001905160208110156120de57600080fd5b50515b612132576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b6121426125c9565b600082116121815760405162461bcd60e51b8152600401808060200182810382526026815260200180612b346026913960400191505060405180910390fd5b8261219b575060408051602081019091526000815261127d565b71ffffffffffffffffffffffffffffffffffff831161224257600082607085901b816121c357fe5b0490506001600160e01b03811115612222576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b031681525091505061127d565b600061225e846e010000000000000000000000000000856123df565b90506001600160e01b03811115612222576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b600081836123605760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561232557818101518382015260200161230d565b50505050905090810190601f1680156123525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161236c57fe5b04905083858161237857fe5b0681850201851461167057fe5b600081848411156123d75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561232557818101518382015260200161230d565b505050900390565b60008060006123ee8686612498565b91509150600084806123fc57fe5b868809905082811115612410576001820391505b91829003918161242e5784838161242357fe5b049350505050611469565b848210612482576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b61248d8383876124c5565b979650505050505050565b60008080600019848609905083850292508281039150828110156124bd576001820391505b509250929050565b600081810382168083816124d557fe5b0492508085816124e157fe5b0494508081600003816124f057fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b604051806101000160405280600081526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610100810182526000808252602082015290810161259c612535565b81526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b60408051602081019091526000815290565b6000602082840312156125ec578081fd5b813561146981612b0d565b6000806000806080858703121561260c578283fd5b843561261781612b0d565b9350602085013561262781612b0d565b925060408501359150606085013561263e81612b25565b939692955090935050565b60006020828403121561265a578081fd5b815161146981612b25565b600060208284031215612676578081fd5b5035919050565b60006020828403121561268e578081fd5b5051919050565b600080604083850312156126a7578182fd5b50508035926020909101359150565b600080600080600060a086880312156126cd578081fd5b853594506020860135935060408601356126e681612b0d565b92506060860135915060808601356126fd81612b0d565b809150509295509295909350565b6000806000806000806000806000806101408b8d03121561272a578485fd5b8a35995060208b0135985060408b013561274381612b25565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b600060208284031215612793578081fd5b815160ff81168114611469578182fd5b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b60006101e0820190506001600160a01b03808b168352808a166020840152508751604083015260208801511515606083015260408801516080830152606088015160a0830152608088015160c083015260a088015160e083015260c088015161010083015260e088015161012083015261287d6101408301886127a3565b856101608301526128926101808301866127a3565b6101a08201939093526101c001529695505050505050565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b60208082526011908201527f4d61782064656274206578636565646564000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f7420696e697469616c697a65640000000000000000000000000000000000604082015260600190565b6020808252600e908201527f426f6e6420636f6e636c75646564000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f416c726561647920736574000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604082015260600190565b60208082526023908201527f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260408201526269636560e81b606082015260800190565b6020808252600e908201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604082015260600190565b90815260200190565b9687526001600160a01b03958616602088015293851660408701526060860192909252608085015260a08401521660c082015260e00190565b9283526001600160a01b03919091166020830152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b6001600160a01b0381168114612b2257600080fd5b50565b8015158114612b2257600080fdfe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80636a6c575d116100d8578063aab114641161008c578063bf7e214f11610066578063bf7e214f14610321578063effc99cd14610329578063f1b7dc781461033c57610177565b8063aab11464146102d7578063abbf4b17146102fb578063bcb296671461030e57610177565b8063805b5bc2116100bd578063805b5bc21461029e578063856519b5146102b1578063a817712a146102c457610177565b80636a6c575d146102785780637a9e5e4b1461028b57610177565b806333ff77221161012f57806357edab4e1161011457806357edab4e146102295780635f1c17c01461023e5780636551df2c1461026557610177565b806333ff77221461020157806357e333ba1461021657610177565b8063172c44ec11610160578063172c44ec146101c8578063187dcb85146101db57806319a64215146101ee57610177565b80630170bbd91461017c57806310fc6172146101a5575b600080fd5b61018f61018a3660046125f7565b61034f565b60405161019c9190612a6e565b60405180910390f35b6101b86101b3366004612665565b6106aa565b60405161019c94939291906127bd565b61018f6101d6366004612665565b6107b6565b61018f6101e93660046126b6565b61082d565b61018f6101fc366004612665565b610e4a565b61021461020f3660046125db565b611082565b005b61018f610224366004612665565b6111c6565b610231611283565b60405161019c91906127a9565b61025161024c366004612665565b611292565b60405161019c9897969594939291906127ff565b610214610273366004612665565b611342565b61018f610286366004612695565b611442565b6102146102993660046125db565b611470565b61018f6102ac366004612695565b6115b3565b61018f6102bf366004612665565b611678565b6102146102d236600461270b565b611822565b6102ea6102e5366004612665565b6119f3565b60405161019c959493929190612aea565b61018f610309366004612665565b611a89565b61018f61031c366004612665565b611bcf565b610231611bf5565b610231610337366004612665565b611c04565b61018f61034a366004612665565b611c2e565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a9320916004808301926020929190829003018186803b15801561039457600080fd5b505afa1580156103a8573d6000803e3d6000fd5b505050506040513d60208110156103be57600080fd5b50516000906001600160a01b0316331461046b5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b820191906000526020600020905b81548152906001019060200180831161043f57829003601f168201915b50509250505060405180910390fd5b50610474612535565b60405180610100016040528060008152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509050604051806101000160405280876001600160a01b03168152602001866001600160a01b031681526020018281526020016000151581526020018581526020018415158152602001600081526020014281525060026000600380549050815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816002016000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701555050606082015181600a0160006101000a81548160ff021916908315150217905550608082015181600b015560a082015181600c0160006101000a81548160ff02191690831515021790555060c082015181600d015560e082015181600e015590505060038054905091506003869080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555050949350505050565b6000806000806106b861257c565b50505060009283525050600260208181526040928390208351610100808201865282546001600160a01b03908116835260018401541682850190815286519182018752948301548152600383015460ff90811615159482019490945260048301548187015260058301546060808301919091526006840154608080840191909152600785015460a080850191909152600886015460c080860191909152600987015460e08087019190915299860194909452600a8601548716151592850192909252600b85015490840152600c840154909416151593820193909352600d820154928101839052600e90910154938101849052519151919391929091565b60006107f8629896806107f2633b9aca006107ec6107d387611c2e565b6000888152600260208190526040909120015490611ce4565b90611d3d565b90611d97565b60008381526002602052604090206007015490915081101561082857506000818152600260205260409020600701545b919050565b60006001600160a01b03841661085e5760405162461bcd60e51b8152600401610855906128aa565b60405180910390fd5b61086661257c565b5060008381526002602081815260408084208151610100808201845282546001600160a01b0390811683526001840154168286015283519081018452828601548152600383015460ff90811615158287015260048401548286015260058401546060808401919091526006850154608080850191909152600786015460a080860191909152600887015460c080870191909152600988015460e08088019190915298870195909552600a870154841680151593870193909352600b87015491860191909152600c860154909216151591840191909152600d84015491830191909152600e909201549281019290925293879052919052906109795760405162461bcd60e51b815260040161085590612918565b80604001516080015142106109a05760405162461bcd60e51b81526004016108559061294f565b7f8f0783a6c1cb2d85a903a2db160118a565dc172b5e4da3d75733b7b5995a0fa1846109cb86610e4a565b6109d4876107b6565b6109dd88611c2e565b6040516109ed9493929190612acf565b60405180910390a16109fe84611dd9565b806040015160e001518160c001511115610a2a5760405162461bcd60e51b8152600401610855906128e1565b610a3384611e1d565b861015610a525760405162461bcd60e51b8152600401610855906129f4565b805160405163f182178360e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163f182178391610aa3918c906004016127e6565b60206040518083038186803b158015610abb57600080fd5b505afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af3919061267d565b90506000610b018287611442565b90508260a0015115610b4a578083608001511015610b315760405162461bcd60e51b81526004016108559061294f565b6080830151610b409082611f85565b6080840152610b83565b8883608001511015610b6e5760405162461bcd60e51b81526004016108559061294f565b6080830151610b7d908a611f85565b60808401525b62989680811015610ba65760405162461bcd60e51b8152600401610855906129bd565b610baf866111c6565b811115610bce5760405162461bcd60e51b815260040161085590612a37565b8251610be5906001600160a01b031633308c611fc7565b825160405163095ea7b360e01b81526001600160a01b039091169063095ea7b390610c36907f0000000000000000000000000000000000000000000000000000000000000000908d906004016127e6565b602060405180830381600087803b158015610c5057600080fd5b505af1158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190612649565b50825160405163bc157ac160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163bc157ac191610cd9918d918790600401612ab0565b602060405180830381600087803b158015610cf357600080fd5b505af1158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b919061267d565b5060c0830151610d3b9083611d3d565b600087815260026020526040808220600d01929092558482015190910151610d639042611d3d565b9050836040015160200151610d7d57506040830151606001515b600460009054906101000a90046001600160a01b03166001600160a01b031663a729e9c1888a87600001518e87878d6040518863ffffffff1660e01b8152600401610dce9796959493929190612a77565b600060405180830381600087803b158015610de857600080fd5b505af1158015610dfc573d6000803e3d6000fd5b505050507f6671c52657539dfe32e25a5646170ce70ec6adfebf197a90845ab3ec1e42569c878b8484604051610e359493929190612acf565b60405180910390a15098975050505050505050565b6000610e5461257c565b506000828152600260208181526040928390208351610100808201865282546001600160a01b0390811683526001840154811683860190815287519283018852958401548252600384015460ff90811615159583019590955260048401548288015260058401546060808401919091526006850154608080850191909152600786015460a080860191909152600887015460c080870191909152600988015460e0808801919091529a870195909552600a8701548816151592860192909252600b86015490850152600c850154909516151594830194909452600d83015490820152600e909101549381019390935290511615610fed57610fe660646107f283602001516001600160a01b03166332da80a385600001516040518263ffffffff1660e01b8152600401610f8791906127a9565b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd7919061267d565b610fe0876107b6565b90611ce4565b915061107c565b61107960646107f283600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561103257600080fd5b505afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a9190612782565b60ff16600a0a610fe0876107b6565b91505b50919050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d057600080fd5b505afa1580156110e4573d6000803e3d6000fd5b505050506040513d60208110156110fa57600080fd5b50516000906001600160a01b0316331461116d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b506004546001600160a01b03161561118457600080fd5b6001600160a01b03811661119757600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061127d620186a06107f260026000868152602001908152602001600020600201600601547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b815260040160206040518083038186803b15801561124557600080fd5b505afa158015611259573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe0919061267d565b92915050565b6004546001600160a01b031681565b60026020818152600092835260409283902080546001820154855161010081018752948301548552600383015460ff9081161515948601949094526004830154958501959095526005820154606085015260068201546080850152600782015460a0850152600882015460c0850152600982015460e0850152600a820154600b830154600c840154600d850154600e909501546001600160a01b0394851698909416969592831694919392169188565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561139057600080fd5b505afa1580156113a4573d6000803e3d6000fd5b505050506040513d60208110156113ba57600080fd5b50516000906001600160a01b0316331461142d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b506000908152600260205260408120600b0155565b6000611469662386f26fc100006107f26114648661145f876107b6565b61213a565b6122bc565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d60208110156114e857600080fd5b50516000906001600160a01b0316331461155b5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60008181526002602052604080822054905163f182178360e01b81526001600160a01b0391821691611670917f00000000000000000000000000000000000000000000000000000000000000009091169063f18217839061161a90859089906004016127e6565b60206040518083038186803b15801561163257600080fd5b505afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a919061267d565b84611442565b949350505050565b600061168261257c565b506000828152600260208181526040928390208351610100808201865282546001600160a01b0390811683526001840154811683860190815287519283018852958401548252600384015460ff90811615159583019590955260048401548288015260058401546060808401919091526006850154608080850191909152600786015460a080860191909152600887015460c080870191909152600988015460e0808801919091529a870195909552600a8701548816151592860192909252600b86015490850152600c850154909516151594830194909452600d83015490820152600e90910154938101939093529051161561181957611811633b9aca006107f283602001516001600160a01b03166332da80a385600001516040518263ffffffff1660e01b81526004016117b891906127a9565b60206040518083038186803b1580156117d057600080fd5b505afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611808919061267d565b610fe087611c2e565b915050610828565b61181183611c2e565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d602081101561189a57600080fd5b50516000906001600160a01b0316331461190d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561045c5780601f106104315761010080835404028352916020019161045c565b5060008a8152600260205260409020600a015460ff16156119405760405162461bcd60e51b815260040161085590612986565b611948612535565b506040805161010081018252998a529715156020808b019182528a8a0198895260608b0197885260808b0196875260a08b0195865260c08b0194855260e08b0193845260009b8c5260029081905298909a20985197890197909755975160038801805491151560ff1992831617905594516004880155925160058701559051600686015551600785015551600884015592516009830155600d820155600a0180549091166001179055565b6000806000806000611a03612535565b505050600093845250506002602081815260409384902084516101008101865292810154808452600382015460ff1615159284019290925260048101549483018590526005810154606084015260068101546080840152600781015460a08401819052600882015460c0850181905260099092015460e090940184905291959193509190565b6000611a9361257c565b5060008281526002602081815260408084208151610100808201845282546001600160a01b0390811683526001840154168286015283519081018452948201548552600382015460ff90811615159486019490945260048201548584015260058201546060808701919091526006830154608080880191909152600784015460a080890191909152600885015460c0808a0191909152600986015460e0808b019190915296850198909852600a8501548716151592840192909252600b84015490830152600c830154909416151593810193909352600d81015493830193909352600e909201549181018290529190611b8d904290611f85565b9050611bb28260400151604001516107f2838560c00151611ce490919063ffffffff16565b92508160c00151831115611bc8578160c0015192505b5050919050565b600061127d611bdd83611a89565b6000848152600260205260409020600d015490611f85565b6001546001600160a01b031681565b60038181548110611c1457600080fd5b6000918252602090912001546001600160a01b0316905081565b600061127d670de0b6b3a76400006107f2611464611c53633b9aca00610fe088611bcf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b815260040160206040518083038186803b158015611cac57600080fd5b505afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145f919061267d565b600082611cf35750600061127d565b82820282848281611d0057fe5b04146114695760405162461bcd60e51b8152600401808060200182810382526021815260200180612b5a6021913960400191505060405180910390fd5b600082820183811015611469576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061146983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506122d4565b611dfd611de582611a89565b6000838152600260205260409020600d015490611f85565b600091825260026020526040909120600d81019190915542600e90910155565b6000611e2761257c565b506000828152600260208181526040928390208351610100808201865282546001600160a01b0390811683526001840154168285015285519081018652938201548452600382015460ff90811615159385019390935260048201548486015260058201546060808601919091526006830154608080870191909152600784015460a080880191909152600885015460c080890191909152600986015460e0808a019190915298850197909752600a8501548616151592840192909252600b84015490830152600c830154909316151592810192909252600d81015492820192909252600e9091015491810191909152611f3d629896806107f2633b9aca006107ec611f3188611c2e565b60408701515190611ce4565b9150806040015160a00151821015611f5f57806040015160a00151915061107c565b604081015160a001511561107c5760008381526002602052604081206007015550919050565b600061146983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612385565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b6020831061204c5780518252601f19909201916020918201910161202d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146120ae576040519150601f19603f3d011682016040523d82523d6000602084013e6120b3565b606091505b50915091508180156120e15750805115806120e157508080602001905160208110156120de57600080fd5b50515b612132576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b6121426125c9565b600082116121815760405162461bcd60e51b8152600401808060200182810382526026815260200180612b346026913960400191505060405180910390fd5b8261219b575060408051602081019091526000815261127d565b71ffffffffffffffffffffffffffffffffffff831161224257600082607085901b816121c357fe5b0490506001600160e01b03811115612222576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b031681525091505061127d565b600061225e846e010000000000000000000000000000856123df565b90506001600160e01b03811115612222576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b600081836123605760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561232557818101518382015260200161230d565b50505050905090810190601f1680156123525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161236c57fe5b04905083858161237857fe5b0681850201851461167057fe5b600081848411156123d75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561232557818101518382015260200161230d565b505050900390565b60008060006123ee8686612498565b91509150600084806123fc57fe5b868809905082811115612410576001820391505b91829003918161242e5784838161242357fe5b049350505050611469565b848210612482576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b61248d8383876124c5565b979650505050505050565b60008080600019848609905083850292508281039150828110156124bd576001820391505b509250929050565b600081810382168083816124d557fe5b0492508085816124e157fe5b0494508081600003816124f057fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b604051806101000160405280600081526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610100810182526000808252602082015290810161259c612535565b81526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b60408051602081019091526000815290565b6000602082840312156125ec578081fd5b813561146981612b0d565b6000806000806080858703121561260c578283fd5b843561261781612b0d565b9350602085013561262781612b0d565b925060408501359150606085013561263e81612b25565b939692955090935050565b60006020828403121561265a578081fd5b815161146981612b25565b600060208284031215612676578081fd5b5035919050565b60006020828403121561268e578081fd5b5051919050565b600080604083850312156126a7578182fd5b50508035926020909101359150565b600080600080600060a086880312156126cd578081fd5b853594506020860135935060408601356126e681612b0d565b92506060860135915060808601356126fd81612b0d565b809150509295509295909350565b6000806000806000806000806000806101408b8d03121561272a578485fd5b8a35995060208b0135985060408b013561274381612b25565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b600060208284031215612793578081fd5b815160ff81168114611469578182fd5b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b60006101e0820190506001600160a01b03808b168352808a166020840152508751604083015260208801511515606083015260408801516080830152606088015160a0830152608088015160c083015260a088015160e083015260c088015161010083015260e088015161012083015261287d6101408301886127a3565b856101608301526128926101808301866127a3565b6101a08201939093526101c001529695505050505050565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b60208082526011908201527f4d61782064656274206578636565646564000000000000000000000000000000604082015260600190565b6020808252600f908201527f4e6f7420696e697469616c697a65640000000000000000000000000000000000604082015260600190565b6020808252600e908201527f426f6e6420636f6e636c75646564000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f416c726561647920736574000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604082015260600190565b60208082526023908201527f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260408201526269636560e81b606082015260800190565b6020808252600e908201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604082015260600190565b90815260200190565b9687526001600160a01b03958616602088015293851660408701526060860192909252608085015260a08401521660c082015260e00190565b9283526001600160a01b03919091166020830152604082015260600190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b6001600160a01b0381168114612b2257600080fd5b50565b8015158114612b2257600080fdfe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBond(address,address,uint256,bool)": {
        "params": {
          "_calculator": "address",
          "_capacity": "uint",
          "_capacityIsPayout": "bool",
          "_principal": "address"
        }
      },
      "bondInfo(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "calculator_": "address",
          "lastBondCreatedAt_": "uint",
          "principal_": "address",
          "totalDebt_": "uint"
        }
      },
      "bondPrice(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "price_": "uint"
        }
      },
      "bondTerms(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "controlVariable_": "uint",
          "maxDebt_": "uint",
          "maxPayout_": "uint",
          "minimumPrice_": "uint",
          "vestingTerm_": "uint"
        }
      },
      "currentDebt(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address,uint256,address)": {
        "params": {
          "_BID": "uint",
          "_amount": "uint",
          "_depositor": "address",
          "_feo": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint256"
        }
      },
      "deprecateBond(uint256)": {
        "params": {
          "_id": "uint"
        }
      },
      "maxPayout(uint256)": {
        "params": {
          "_BID": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256,uint256)": {
        "params": {
          "_BID": "uint",
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "payoutForAmount(uint256,uint256)": {
        "params": {
          "_BID": "uint",
          "_amount": "uint"
        }
      },
      "setTeller(address)": {
        "params": {
          "_teller": "address"
        }
      },
      "setTerms(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_conclusion": "uint",
          "_controlVariable": "uint",
          "_expiration": "uint",
          "_fixedTerm": "bool",
          "_id": "uint",
          "_initialDebt": "uint",
          "_maxDebt": "uint",
          "_maxPayout": "uint",
          "_minimumPrice": "uint",
          "_vestingTerm": "uint"
        }
      },
      "standardizedDebtRatio(uint256)": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBond(address,address,uint256,bool)": {
        "notice": "creates a new bond type"
      },
      "bondInfo(uint256)": {
        "notice": "returns data about a bond type"
      },
      "bondPrice(uint256)": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD(uint256)": {
        "notice": "converts bond price to DAI value"
      },
      "bondTerms(uint256)": {
        "notice": "returns terms for a bond type"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to QUAS supply"
      },
      "deposit(uint256,uint256,address,uint256,address)": {
        "notice": "deposit bond"
      },
      "deprecateBond(uint256)": {
        "notice": "disable existing bond"
      },
      "maxPayout(uint256)": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of treasury value"
      },
      "payoutForAmount(uint256,uint256)": {
        "notice": "payout due for amount of token"
      },
      "setTeller(address)": {
        "notice": "set teller contract"
      },
      "setTerms(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "set minimum price for new bond"
      },
      "standardizedDebtRatio(uint256)": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11094,
        "contract": "contracts/BondDepository.sol:QuasarBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11096,
        "contract": "contracts/BondDepository.sol:QuasarBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IQuasarAuthority)7384"
      },
      {
        "astId": 89,
        "contract": "contracts/BondDepository.sol:QuasarBondDepository",
        "label": "bonds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Bond)68_storage)"
      },
      {
        "astId": 92,
        "contract": "contracts/BondDepository.sol:QuasarBondDepository",
        "label": "IDs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/BondDepository.sol:QuasarBondDepository",
        "label": "teller",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITeller)7534"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBondingCalculator)7069": {
        "encoding": "inplace",
        "label": "contract IBondingCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)7204": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IQuasarAuthority)7384": {
        "encoding": "inplace",
        "label": "contract IQuasarAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITeller)7534": {
        "encoding": "inplace",
        "label": "contract ITeller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Bond)68_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuasarBondDepository.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)68_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bond)68_storage": {
        "encoding": "inplace",
        "label": "struct QuasarBondDepository.Bond",
        "members": [
          {
            "astId": 53,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)7204"
          },
          {
            "astId": 55,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "calculator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IBondingCalculator)7069"
          },
          {
            "astId": 57,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "terms",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Terms)85_storage"
          },
          {
            "astId": 59,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "termsSet",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 61,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 63,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "capacityIsPayout",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 65,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 67,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "lastDecay",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Terms)85_storage": {
        "encoding": "inplace",
        "label": "struct QuasarBondDepository.Terms",
        "members": [
          {
            "astId": 70,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 72,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 74,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 76,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "expiration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 78,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "conclusion",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 80,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 82,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 84,
            "contract": "contracts/BondDepository.sol:QuasarBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}