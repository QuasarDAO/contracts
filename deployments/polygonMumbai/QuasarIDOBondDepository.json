{
  "address": "0x909717EACA8F2331f259Cb7A2A63281dC3881665",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IQuasarAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "CreateBond",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IQuasarAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "principal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPurchase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        },
        {
          "internalType": "enum QuasarIDOBondDepository.STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feo",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_principal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTerm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceInUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPurchase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        }
      ],
      "name": "initializeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "pushWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingBondCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IQuasarAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum QuasarIDOBondDepository.STAGE",
          "name": "_stage",
          "type": "uint8"
        }
      ],
      "name": "setStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teller",
          "type": "address"
        }
      ],
      "name": "setTeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teller",
      "outputs": [
        {
          "internalType": "contract ITeller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x22f9ba9a3adbc5830cd3cf5f5eca55a13b90f362ae852cd9ed3f0da022c306d3",
  "receipt": {
    "to": null,
    "from": "0xA8D98f7a37574dc43e78818F70f7861d42749BA6",
    "contractAddress": "0x909717EACA8F2331f259Cb7A2A63281dC3881665",
    "transactionIndex": 6,
    "gasUsed": "1555131",
    "logsBloom": "0x
    "blockHash": "0xc0aa37cc6fd77671a406d676186e06355d8ad2f39e5a0ceb54d5dc37730fdee4",
    "transactionHash": "0x22f9ba9a3adbc5830cd3cf5f5eca55a13b90f362ae852cd9ed3f0da022c306d3",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 24213188,
        "transactionHash": "0x22f9ba9a3adbc5830cd3cf5f5eca55a13b90f362ae852cd9ed3f0da022c306d3",
        "address": "0x909717EACA8F2331f259Cb7A2A63281dC3881665",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000005e7ab75db9ca25decfb1a1b3ccc3905fee885f68"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xc0aa37cc6fd77671a406d676186e06355d8ad2f39e5a0ceb54d5dc37730fdee4"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 24213188,
        "transactionHash": "0x22f9ba9a3adbc5830cd3cf5f5eca55a13b90f362ae852cd9ed3f0da022c306d3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a8d98f7a37574dc43e78818f70f7861d42749ba6",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002c331135d6df6d0000000000000000000000000000000000000000000000000dca2c73c0a732ee000000000000000000000000000000000000000000000545fb6ef66186ad97bc0000000000000000000000000000000000000000000000000d9df9628ad05381000000000000000000000000000000000000000000000545fb9b2972bc847729",
        "logIndex": 27,
        "blockHash": "0xc0aa37cc6fd77671a406d676186e06355d8ad2f39e5a0ceb54d5dc37730fdee4"
      }
    ],
    "blockNumber": 24213188,
    "cumulativeGasUsed": "1931049",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb4D2BD97f235Ac8a85C7DB14ae4C48b6fFBA0699",
    "0x5e7AB75Db9Ca25deCfB1a1B3CcC3905fEE885F68"
  ],
  "numDeployments": 1,
  "solcInputHash": "738a2335619ff75761cabf0c79c1824c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IQuasarAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"CreateBond\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IQuasarAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"principal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"enum QuasarIDOBondDepository.STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feo\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_principal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"}],\"name\":\"initializeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"pushWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingBondCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IQuasarAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum QuasarIDOBondDepository.STAGE\",\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teller\",\"type\":\"address\"}],\"name\":\"setTeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teller\",\"outputs\":[{\"internalType\":\"contract ITeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice()\":{\"returns\":{\"_0\":\"price_ uint\"}},\"bondPriceInUSD()\":{\"returns\":{\"_0\":\"price_ uint\"}},\"deposit(uint256,address,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_feo\":\"address\"},\"returns\":{\"_0\":\"uint256\"}},\"initializeBond(uint256,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_bondId\":\"uint256\",\"_capacity\":\"uint\",\"_maxPurchase\":\"uint256\",\"_price\":\"uint256\",\"_priceInUSD\":\"uint256\",\"_principal\":\"address\",\"_vestingTerm\":\"uint256\"}},\"maxPayout(address)\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pushWhitelisted(address[],bool)\":{\"params\":{\"_addresses\":\"address[]\",\"_whitelisted\":\"bool\"}},\"setStage(uint8)\":{\"params\":{\"_stage\":\"stage\"}},\"setTeller(address)\":{\"params\":{\"_teller\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondPrice()\":{\"notice\":\"bond price\"},\"bondPriceInUSD()\":{\"notice\":\"bond price in DAI\"},\"deposit(uint256,address,address)\":{\"notice\":\"deposit bond\"},\"initializeBond(uint256,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"creates a new bond type\"},\"kill()\":{\"notice\":\"stop deposits forever\"},\"maxPayout(address)\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256)\":{\"notice\":\"calculate interest due for new bond\"},\"pushWhitelisted(address[],bool)\":{\"notice\":\"adds addresses to whitelisted array\"},\"remainingBondCapacity()\":{\"notice\":\"determine remaining bond capacity \"},\"setStage(uint8)\":{\"notice\":\"set stage of IDO\"},\"setTeller(address)\":{\"notice\":\"set teller contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ido/IDOBondDepository.sol\":\"QuasarIDOBondDepository\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/ido/IDOBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"../types/QuasarAccessControlled.sol\\\";\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITeller.sol\\\";\\n\\ncontract QuasarIDOBondDepository is QuasarAccessControlled {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateBond(\\n        uint256 bid,\\n        uint256 amount,\\n        uint256 payout,\\n        uint256 expires\\n    );\\n\\n    /* ======== DATA STRUCTURES ======== */\\n\\n    enum STAGE {\\n        CLOSED, //0\\n        WHITELIST, //1\\n        PUBLIC //2\\n    }\\n\\n    // Info about each type of bond\\n    struct Bond {\\n        uint256 bondId;\\n        IERC20 principal; // token to accept as payment\\n        uint256 vestingTerm; // term in seconds (fixed-term)\\n        uint256 price; // ido price in pretty dollars (10000 = 100$)\\n        uint256 priceInUSD; // ido price in principal\\n        uint256 maxPurchase; // max allocation in QUAS\\n        uint256 capacity; // capacity remaining in QUAS\\n        uint256 purchased; // in QUAS\\n        STAGE stage; // current stage of IDO\\n        bool initialized; // is bond initialized\\n    }\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    Bond public bond;\\n\\n    ITeller public teller; // handles payment\\n\\n    ITreasury immutable treasury;\\n\\n    mapping(address => bool) whitelisted;\\n    mapping(address => uint256) purchased; // in QUAS\\n\\n    bool killed;\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _treasury, \\n        address _authority\\n    ) QuasarAccessControlled(IQuasarAuthority(_authority)) {\\n        require(_treasury != address(0));\\n        treasury = ITreasury(_treasury);\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n    * @notice creates a new bond type\\n    * @param _bondId uint256\\n    * @param _principal address\\n    * @param _vestingTerm uint256\\n    * @param _price uint256\\n    * @param _priceInUSD uint256\\n    * @param _maxPurchase uint256\\n    * @param _capacity uint\\n    */\\n    function initializeBond(\\n        uint256 _bondId,\\n        address _principal,\\n        uint256 _vestingTerm,\\n        uint256 _price,\\n        uint256 _priceInUSD,\\n        uint256 _maxPurchase,\\n        uint256 _capacity\\n    ) external onlyGuardian {\\n        require(!bond.initialized, \\\"IDO: already initialized\\\");\\n        bond = Bond({\\n            bondId: _bondId,\\n            principal: IERC20(_principal), \\n            vestingTerm: _vestingTerm,\\n            price: _price,\\n            priceInUSD: _priceInUSD,\\n            maxPurchase: _maxPurchase,\\n            capacity: _capacity,\\n            purchased: 0,\\n            stage: STAGE.CLOSED,\\n            initialized: true\\n        });\\n    }\\n\\n    /**\\n    * @notice set stage of IDO\\n    * @param _stage stage\\n    */\\n    function setStage(STAGE _stage) external onlyGuardian {\\n        require(bond.initialized, \\\"Bond is not initialized\\\");\\n        bond.stage = _stage;\\n    }\\n\\n    /**\\n    * @notice adds addresses to whitelisted array\\n    * @param _addresses address[]\\n    * @param _whitelisted bool\\n    */\\n    function pushWhitelisted(address[] calldata _addresses, bool _whitelisted) external onlyGuardian {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            whitelisted[_addresses[i]] = _whitelisted;\\n        }\\n    }\\n\\n    /**\\n    * @notice set teller contract\\n    * @param _teller address\\n    */\\n    function setTeller(address _teller) external onlyGovernor {\\n        require(address(teller) == address(0));\\n        require(_teller != address(0));\\n        teller = ITeller(_teller);\\n    }\\n\\n    /**\\n    * @notice stop deposits forever\\n    */\\n    function kill() external onlyGovernor {\\n        killed = true;\\n    }\\n\\n    /* ======== MUTABLE FUNCTIONS ======== */\\n\\n    /**\\n    * @notice deposit bond\\n    * @param _amount uint\\n    * @param _depositor address\\n    * @param _feo address\\n    * @return uint256\\n    */\\n    function deposit(\\n        uint256 _amount,\\n        address _depositor,\\n        address _feo\\n    ) external returns (uint256) {\\n        require(!killed, \\\"IDO: stopped forever\\\");\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n        require(bond.initialized, \\\"IDO: Not initialized\\\");\\n        require(bond.stage != STAGE.CLOSED, \\\"IDO: Closed\\\");\\n        if (bond.stage == STAGE.WHITELIST) {\\n            require(whitelisted[msg.sender], \\\"IDO: Not whitelisted\\\");\\n        }\\n\\n        uint256 value = treasury.tokenValue(address(bond.principal), _amount);\\n        uint256 payout = payoutFor(value); // payout to bonder is computed\\n\\n        require(payout >= 10000000, \\\"IDO: Bond too small\\\"); // must be > 0.01 QUAS ( underflow protection )\\n        require(payout <= maxPayout(msg.sender), \\\"IDO: Max allocation exceeded\\\");\\n\\n        bond.principal.safeTransferFrom(msg.sender, address(this), _amount); // move funds from sender\\n        bond.principal.approve(address(treasury), _amount);\\n        treasury.deposit(_amount, address(bond.principal), value);  // deposit funds to treasury\\n\\n        uint256 expiration = bond.vestingTerm.add(block.timestamp);\\n\\n        // user info stored with teller\\n        teller.newBond(bond.bondId, _depositor, address(bond.principal), _amount, payout, expiration, _feo);\\n\\n        emit CreateBond(bond.bondId, _amount, payout, expiration);\\n\\n        purchased[msg.sender] = purchased[msg.sender] + payout;\\n\\n        return payout;\\n    }\\n\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    // PAYOUT\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout(address _depositor) public view returns (uint256) {\\n\\n        uint256 maxPurchase = bond.maxPurchase;\\n        uint256 bonded = purchased[_depositor];\\n        uint256 remainingAllocation = maxPurchase.sub(bonded);\\n        uint256 remainingCapacity = remainingBondCapacity();\\n\\n        if (bond.stage == STAGE.WHITELIST && whitelisted[_depositor] && remainingCapacity > 0) {\\n            if (remainingAllocation > remainingCapacity) {\\n                return remainingCapacity;\\n            } else {\\n                return remainingAllocation;\\n            }\\n        }\\n        if (bond.stage == STAGE.PUBLIC) {\\n            if (remainingAllocation > remainingCapacity) {\\n                return remainingCapacity;\\n            } else {\\n                return remainingAllocation;\\n            }        \\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice determine remaining bond capacity \\n     */\\n    function remainingBondCapacity() public view returns (uint256) {\\n        if (bond.capacity < bond.purchased) {\\n            return 0;\\n        } else {\\n            return bond.capacity.sub(bond.purchased);\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value) public view returns (uint256) {\\n        return FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e16);\\n    }\\n\\n    /**\\n     *  @notice bond price\\n     *  @return price_ uint\\n     */\\n    function bondPrice() public view returns (uint256) {\\n        return bond.price;\\n    }\\n\\n    /**\\n     *  @notice bond price in DAI\\n     *  @return price_ uint\\n     */\\n    function bondPriceInUSD() public view returns (uint256) {\\n        return bond.priceInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0xa833859f0cb27b13eac84a9011d3ed63631a3d877434e91807151ba9636e4773\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x6dfa58ba4a241b2201f3ecb3ba26345ce4dd66f0a553f18b2a284341f5aacd72\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IQuasarAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.7.5;\\n\\ninterface IQuasarAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\",\"keccak256\":\"0xf134da7c5193076031295a4282e4f49b0ed75316e5215b020574387dca90bbce\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITeller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITeller {\\n    function newBond( \\n        uint256 _bid,\\n        address _bonder, \\n        address _principal,\\n        uint _principalPaid,\\n        uint _payout, \\n        uint _expires,\\n        address _feo\\n    ) external;\\n    function redeem(address _bonder, uint256 _bid, bool _unstake) external;\\n    function getReward() external;\\n    function setFEReward(uint256 reward) external;\\n    function payoutInfo(address _bonder, uint256 _index) external view returns (uint256 lockedPayout, uint256 lockedStakingRewards, uint256 pendingPayout, uint256 pendingStakingRewards);\\n    function percentVestedFor(address _bonder, uint256 _index) external view returns (uint256 percentVested_);\\n}\\n\",\"keccak256\":\"0xad977bbdeebaa119df95ae2e7d6d4f9e9293131ce434e79c3956e4c4be0c0420\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\n\\nlibrary Babylonian {\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\n\\nlibrary FixedPoint {\\n\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n\\n        return uint(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n    \\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\",\"keccak256\":\"0xab2a4545666244ce3564fa3e7c81f808a6041539fe96968d60b72a20d672c354\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x99da15d5a821951f2b2f507e0f0129ce3ed3a87b6455c6b32c78980c0fdc1ed7\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"},\"contracts/types/QuasarAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IQuasarAuthority.sol\\\";\\n\\nabstract contract QuasarAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IQuasarAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IQuasarAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IQuasarAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IQuasarAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0xc166b81db04bd197b45f5f9460daaa0ff887083cd60d07d5b58a379d585df5fa\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0604052600c60a08190526b15539055551213d49256915160a21b60c09081526200002f9160009190620000e2565b503480156200003d57600080fd5b5060405162001bfb38038062001bfb833981810160405260408110156200006357600080fd5b508051602090910151600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038216620000cb57600080fd5b5060601b6001600160601b0319166080526200018e565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200011a576000855562000165565b82601f106200013557805160ff191683800117855562000165565b8280016001018555821562000165579182015b828111156200016557825182559160200191906001019062000148565b506200017392915062000177565b5090565b5b8082111562000173576000815560010162000178565b60805160601c611a45620001b66000398061059052806106f952806107b35250611a456000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063844b5c7c11610097578063ce3cd99711610066578063ce3cd99714610316578063cfec09c614610336578063d7ccfb0b1461033e578063e300e98b14610346576100f5565b8063844b5c7c1461024a578063b11ab2f114610252578063bc4573a5146102c4578063bf7e214f1461030e576100f5565b806357edab4e116100d357806357edab4e1461017057806364c9ec6f146101945780637927ebf8146102075780637a9e5e4b14610224576100f5565b80632e2d2984146100fa57806333ff77221461014057806341c0e1b514610168575b600080fd5b61012e6004803603606081101561011057600080fd5b508035906001600160a01b036020820135811691604001351661036c565b60408051918252519081900360200190f35b6101666004803603602081101561015657600080fd5b50356001600160a01b0316610940565b005b610166610abe565b610178610bb9565b604080516001600160a01b039092168252519081900360200190f35b61019c610bc8565b604051808b81526020018a6001600160a01b031681526020018981526020018881526020018781526020018681526020018581526020018481526020018360028111156101e557fe5b815260200182151581526020019a505050505050505050505060405180910390f35b61012e6004803603602081101561021d57600080fd5b5035610bfe565b6101666004803603602081101561023a57600080fd5b50356001600160a01b0316610c32565b61012e610d75565b6101666004803603604081101561026857600080fd5b81019060208101813564010000000081111561028357600080fd5b82018360208201111561029557600080fd5b803590602001918460208302840111640100000000831117156102b757600080fd5b9193509150351515610d7c565b610166600480360360e08110156102da57600080fd5b508035906001600160a01b036020820135169060408101359060608101359060808101359060a08101359060c00135610ec3565b610178611121565b6101666004803603602081101561032c57600080fd5b503560ff16611130565b61012e611299565b61012e6112c6565b61012e6004803603602081101561035c57600080fd5b50356001600160a01b03166112cc565b600e5460009060ff16156103c7576040805162461bcd60e51b815260206004820152601460248201527f49444f3a2073746f7070656420666f7265766572000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316610422576040805162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b600a54610100900460ff1661047e576040805162461bcd60e51b815260206004820152601460248201527f49444f3a204e6f7420696e697469616c697a6564000000000000000000000000604482015290519081900360640190fd5b6000600a5460ff16600281111561049157fe5b14156104e4576040805162461bcd60e51b815260206004820152600b60248201527f49444f3a20436c6f736564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600a5460ff1660028111156104f757fe5b141561056157336000908152600c602052604090205460ff16610561576040805162461bcd60e51b815260206004820152601460248201527f49444f3a204e6f742077686974656c6973746564000000000000000000000000604482015290519081900360640190fd5b6003546040805163f182178360e01b81526001600160a01b0392831660048201526024810187905290516000927f0000000000000000000000000000000000000000000000000000000000000000169163f1821783916044808301926020929190829003018186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d602081101561060057600080fd5b50519050600061060f82610bfe565b905062989680811015610669576040805162461bcd60e51b815260206004820152601360248201527f49444f3a20426f6e6420746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b610672336112cc565b8111156106c6576040805162461bcd60e51b815260206004820152601c60248201527f49444f3a204d617820616c6c6f636174696f6e20657863656564656400000000604482015290519081900360640190fd5b6003546106de906001600160a01b03163330896113a3565b6003546040805163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018a90529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b505050506040513d602081101561077e57600080fd5b50506003546040805163bc157ac160e01b8152600481018990526001600160a01b0392831660248201526044810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163bc157ac1916064808201926020929091908290030181600087803b1580156107fe57600080fd5b505af1158015610812573d6000803e3d6000fd5b505050506040513d602081101561082857600080fd5b505060045460009061083a9042611516565b600b546002546003546040805163a729e9c160e01b815260048101939093526001600160a01b038b811660248501529182166044840152606483018c90526084830187905260a4830185905289821660c4840152519394509091169163a729e9c19160e48082019260009290919082900301818387803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b505060025460408051918252602082018b905281810186905260608201859052517f6671c52657539dfe32e25a5646170ce70ec6adfebf197a90845ab3ec1e42569c9350908190036080019150a150336000908152600d602052604090208054820190559150505b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b505050506040513d60208110156109b857600080fd5b50516000906001600160a01b03163314610a655760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b820191906000526020600020905b815481529060010190602001808311610a3957829003601f168201915b50509250505060405180910390fd5b50600b546001600160a01b031615610a7c57600080fd5b6001600160a01b038116610a8f57600080fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0c57600080fd5b505afa158015610b20573d6000803e3d6000fd5b505050506040513d6020811015610b3657600080fd5b50516000906001600160a01b03163314610ba95760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b50600e805460ff19166001179055565b600b546001600160a01b031681565b600254600354600454600554600654600754600854600954600a546001600160a01b039097169660ff808216916101009004168a565b6000610c2a662386f26fc10000610c24610c1f85610c1a6112c6565b611579565b6116fb565b90611713565b90505b919050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8057600080fd5b505afa158015610c94573d6000803e3d6000fd5b505050506040513d6020811015610caa57600080fd5b50516000906001600160a01b03163314610d1d5760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6006545b90565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610dca57600080fd5b505afa158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b50516000906001600160a01b03163314610e675760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b5060005b82811015610ebd5781600c6000868685818110610e8457fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610e6b565b50505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d6020811015610f3b57600080fd5b50516000906001600160a01b03163314610fae5760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b50600a54610100900460ff161561100c576040805162461bcd60e51b815260206004820152601860248201527f49444f3a20616c726561647920696e697469616c697a65640000000000000000604482015290519081900360640190fd5b604051806101400160405280888152602001876001600160a01b03168152602001868152602001858152602001848152602001838152602001828152602001600081526020016000600281111561105f57fe5b81526001602091820181905282516002908155918301516003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560408301516004556060830151600555608083015160065560a083015160075560c083015160085560e0830151600955610100830151600a80549192909160ff19169083858111156110f057fe5b02179055506101209190910151600890910180549115156101000261ff001990921691909117905550505050505050565b6001546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561117e57600080fd5b505afa158015611192573d6000803e3d6000fd5b505050506040513d60208110156111a857600080fd5b50516000906001600160a01b0316331461121b5760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b50600a54610100900460ff16611278576040805162461bcd60e51b815260206004820152601760248201527f426f6e64206973206e6f7420696e697469616c697a6564000000000000000000604482015290519081900360640190fd5b600a805482919060ff1916600183600281111561129157fe5b021790555050565b60095460085460009111156112b057506000610d79565b6009546008546112bf91611755565b9050610d79565b60055490565b6007546001600160a01b0382166000908152600d6020526040812054909190826112f68383611755565b90506000611302611299565b90506001600a5460ff16600281111561131757fe5b14801561133c57506001600160a01b0386166000908152600c602052604090205460ff165b80156113485750600081115b1561136b5780821115611360579350610c2d92505050565b509250610c2d915050565b6002600a5460ff16600281111561137e57fe5b14156113975780821115611360579350610c2d92505050565b50600095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106114285780518252601f199092019160209182019101611409565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461148a576040519150601f19603f3d011682016040523d82523d6000602084013e61148f565b606091505b50915091508180156114bd5750805115806114bd57508080602001905160208110156114ba57600080fd5b50515b61150e576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b600082820183811015611570576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b611581611a00565b600082116115c05760405162461bcd60e51b8152600401808060200182810382526026815260200180611a136026913960400191505060405180910390fd5b826115da5750604080516020810190915260008152611573565b71ffffffffffffffffffffffffffffffffffff831161168157600082607085901b8161160257fe5b0490506001600160e01b03811115611661576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050611573565b600061169d846e01000000000000000000000000000085611797565b90506001600160e01b03811115611661576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b600061157083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611850565b600061157083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611909565b60008060006117a68686611963565b91509150600084806117b457fe5b8688099050828111156117c8576001820391505b9182900391816117e6578483816117db57fe5b049350505050610939565b84821061183a576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b611845838387611990565b979650505050505050565b600081836118dc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118a1578181015183820152602001611889565b50505050905090810190601f1680156118ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816118e857fe5b0490508385816118f457fe5b0681850201851461190157fe5b949350505050565b6000818484111561195b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156118a1578181015183820152602001611889565b505050900390565b6000808060001984860990508385029250828103915082811015611988576001820391505b509250929050565b600081810382168083816119a057fe5b0492508085816119ac57fe5b0494508081600003816119bb57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726fa164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063844b5c7c11610097578063ce3cd99711610066578063ce3cd99714610316578063cfec09c614610336578063d7ccfb0b1461033e578063e300e98b14610346576100f5565b8063844b5c7c1461024a578063b11ab2f114610252578063bc4573a5146102c4578063bf7e214f1461030e576100f5565b806357edab4e116100d357806357edab4e1461017057806364c9ec6f146101945780637927ebf8146102075780637a9e5e4b14610224576100f5565b80632e2d2984146100fa57806333ff77221461014057806341c0e1b514610168575b600080fd5b61012e6004803603606081101561011057600080fd5b508035906001600160a01b036020820135811691604001351661036c565b60408051918252519081900360200190f35b6101666004803603602081101561015657600080fd5b50356001600160a01b0316610940565b005b610166610abe565b610178610bb9565b604080516001600160a01b039092168252519081900360200190f35b61019c610bc8565b604051808b81526020018a6001600160a01b031681526020018981526020018881526020018781526020018681526020018581526020018481526020018360028111156101e557fe5b815260200182151581526020019a505050505050505050505060405180910390f35b61012e6004803603602081101561021d57600080fd5b5035610bfe565b6101666004803603602081101561023a57600080fd5b50356001600160a01b0316610c32565b61012e610d75565b6101666004803603604081101561026857600080fd5b81019060208101813564010000000081111561028357600080fd5b82018360208201111561029557600080fd5b803590602001918460208302840111640100000000831117156102b757600080fd5b9193509150351515610d7c565b610166600480360360e08110156102da57600080fd5b508035906001600160a01b036020820135169060408101359060608101359060808101359060a08101359060c00135610ec3565b610178611121565b6101666004803603602081101561032c57600080fd5b503560ff16611130565b61012e611299565b61012e6112c6565b61012e6004803603602081101561035c57600080fd5b50356001600160a01b03166112cc565b600e5460009060ff16156103c7576040805162461bcd60e51b815260206004820152601460248201527f49444f3a2073746f7070656420666f7265766572000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316610422576040805162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b600a54610100900460ff1661047e576040805162461bcd60e51b815260206004820152601460248201527f49444f3a204e6f7420696e697469616c697a6564000000000000000000000000604482015290519081900360640190fd5b6000600a5460ff16600281111561049157fe5b14156104e4576040805162461bcd60e51b815260206004820152600b60248201527f49444f3a20436c6f736564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600a5460ff1660028111156104f757fe5b141561056157336000908152600c602052604090205460ff16610561576040805162461bcd60e51b815260206004820152601460248201527f49444f3a204e6f742077686974656c6973746564000000000000000000000000604482015290519081900360640190fd5b6003546040805163f182178360e01b81526001600160a01b0392831660048201526024810187905290516000927f0000000000000000000000000000000000000000000000000000000000000000169163f1821783916044808301926020929190829003018186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d602081101561060057600080fd5b50519050600061060f82610bfe565b905062989680811015610669576040805162461bcd60e51b815260206004820152601360248201527f49444f3a20426f6e6420746f6f20736d616c6c00000000000000000000000000604482015290519081900360640190fd5b610672336112cc565b8111156106c6576040805162461bcd60e51b815260206004820152601c60248201527f49444f3a204d617820616c6c6f636174696f6e20657863656564656400000000604482015290519081900360640190fd5b6003546106de906001600160a01b03163330896113a3565b6003546040805163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018a90529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561075457600080fd5b505af1158015610768573d6000803e3d6000fd5b505050506040513d602081101561077e57600080fd5b50506003546040805163bc157ac160e01b8152600481018990526001600160a01b0392831660248201526044810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163bc157ac1916064808201926020929091908290030181600087803b1580156107fe57600080fd5b505af1158015610812573d6000803e3d6000fd5b505050506040513d602081101561082857600080fd5b505060045460009061083a9042611516565b600b546002546003546040805163a729e9c160e01b815260048101939093526001600160a01b038b811660248501529182166044840152606483018c90526084830187905260a4830185905289821660c4840152519394509091169163a729e9c19160e48082019260009290919082900301818387803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b505060025460408051918252602082018b905281810186905260608201859052517f6671c52657539dfe32e25a5646170ce70ec6adfebf197a90845ab3ec1e42569c9350908190036080019150a150336000908152600d602052604090208054820190559150505b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561098e57600080fd5b505afa1580156109a2573d6000803e3d6000fd5b505050506040513d60208110156109b857600080fd5b50516000906001600160a01b03163314610a655760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b820191906000526020600020905b815481529060010190602001808311610a3957829003601f168201915b50509250505060405180910390fd5b50600b546001600160a01b031615610a7c57600080fd5b6001600160a01b038116610a8f57600080fd5b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0c57600080fd5b505afa158015610b20573d6000803e3d6000fd5b505050506040513d6020811015610b3657600080fd5b50516000906001600160a01b03163314610ba95760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b50600e805460ff19166001179055565b600b546001600160a01b031681565b600254600354600454600554600654600754600854600954600a546001600160a01b039097169660ff808216916101009004168a565b6000610c2a662386f26fc10000610c24610c1f85610c1a6112c6565b611579565b6116fb565b90611713565b90505b919050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8057600080fd5b505afa158015610c94573d6000803e3d6000fd5b505050506040513d6020811015610caa57600080fd5b50516000906001600160a01b03163314610d1d5760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6006545b90565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610dca57600080fd5b505afa158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b50516000906001600160a01b03163314610e675760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b5060005b82811015610ebd5781600c6000868685818110610e8457fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610e6b565b50505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d6020811015610f3b57600080fd5b50516000906001600160a01b03163314610fae5760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b50600a54610100900460ff161561100c576040805162461bcd60e51b815260206004820152601860248201527f49444f3a20616c726561647920696e697469616c697a65640000000000000000604482015290519081900360640190fd5b604051806101400160405280888152602001876001600160a01b03168152602001868152602001858152602001848152602001838152602001828152602001600081526020016000600281111561105f57fe5b81526001602091820181905282516002908155918301516003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560408301516004556060830151600555608083015160065560a083015160075560c083015160085560e0830151600955610100830151600a80549192909160ff19169083858111156110f057fe5b02179055506101209190910151600890910180549115156101000261ff001990921691909117905550505050505050565b6001546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561117e57600080fd5b505afa158015611192573d6000803e3d6000fd5b505050506040513d60208110156111a857600080fd5b50516000906001600160a01b0316331461121b5760405162461bcd60e51b8152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015610a565780601f10610a2b57610100808354040283529160200191610a56565b50600a54610100900460ff16611278576040805162461bcd60e51b815260206004820152601760248201527f426f6e64206973206e6f7420696e697469616c697a6564000000000000000000604482015290519081900360640190fd5b600a805482919060ff1916600183600281111561129157fe5b021790555050565b60095460085460009111156112b057506000610d79565b6009546008546112bf91611755565b9050610d79565b60055490565b6007546001600160a01b0382166000908152600d6020526040812054909190826112f68383611755565b90506000611302611299565b90506001600a5460ff16600281111561131757fe5b14801561133c57506001600160a01b0386166000908152600c602052604090205460ff165b80156113485750600081115b1561136b5780821115611360579350610c2d92505050565b509250610c2d915050565b6002600a5460ff16600281111561137e57fe5b14156113975780821115611360579350610c2d92505050565b50600095945050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106114285780518252601f199092019160209182019101611409565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461148a576040519150601f19603f3d011682016040523d82523d6000602084013e61148f565b606091505b50915091508180156114bd5750805115806114bd57508080602001905160208110156114ba57600080fd5b50515b61150e576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b600082820183811015611570576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b611581611a00565b600082116115c05760405162461bcd60e51b8152600401808060200182810382526026815260200180611a136026913960400191505060405180910390fd5b826115da5750604080516020810190915260008152611573565b71ffffffffffffffffffffffffffffffffffff831161168157600082607085901b8161160257fe5b0490506001600160e01b03811115611661576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050611573565b600061169d846e01000000000000000000000000000085611797565b90506001600160e01b03811115611661576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b600061157083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611850565b600061157083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611909565b60008060006117a68686611963565b91509150600084806117b457fe5b8688099050828111156117c8576001820391505b9182900391816117e6578483816117db57fe5b049350505050610939565b84821061183a576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b611845838387611990565b979650505050505050565b600081836118dc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118a1578181015183820152602001611889565b50505050905090810190601f1680156118ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816118e857fe5b0490508385816118f457fe5b0681850201851461190157fe5b949350505050565b6000818484111561195b5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156118a1578181015183820152602001611889565b505050900390565b6000808060001984860990508385029250828103915082811015611988576001820391505b509250929050565b600081810382168083816119a057fe5b0492508085816119ac57fe5b0494508081600003816119bb57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726fa164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice()": {
        "returns": {
          "_0": "price_ uint"
        }
      },
      "bondPriceInUSD()": {
        "returns": {
          "_0": "price_ uint"
        }
      },
      "deposit(uint256,address,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_feo": "address"
        },
        "returns": {
          "_0": "uint256"
        }
      },
      "initializeBond(uint256,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_bondId": "uint256",
          "_capacity": "uint",
          "_maxPurchase": "uint256",
          "_price": "uint256",
          "_priceInUSD": "uint256",
          "_principal": "address",
          "_vestingTerm": "uint256"
        }
      },
      "maxPayout(address)": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pushWhitelisted(address[],bool)": {
        "params": {
          "_addresses": "address[]",
          "_whitelisted": "bool"
        }
      },
      "setStage(uint8)": {
        "params": {
          "_stage": "stage"
        }
      },
      "setTeller(address)": {
        "params": {
          "_teller": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondPrice()": {
        "notice": "bond price"
      },
      "bondPriceInUSD()": {
        "notice": "bond price in DAI"
      },
      "deposit(uint256,address,address)": {
        "notice": "deposit bond"
      },
      "initializeBond(uint256,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "creates a new bond type"
      },
      "kill()": {
        "notice": "stop deposits forever"
      },
      "maxPayout(address)": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256)": {
        "notice": "calculate interest due for new bond"
      },
      "pushWhitelisted(address[],bool)": {
        "notice": "adds addresses to whitelisted array"
      },
      "remainingBondCapacity()": {
        "notice": "determine remaining bond capacity "
      },
      "setStage(uint8)": {
        "notice": "set stage of IDO"
      },
      "setTeller(address)": {
        "notice": "set teller contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11094,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11096,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IQuasarAuthority)7384"
      },
      {
        "astId": 6539,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "bond",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Bond)6537_storage"
      },
      {
        "astId": 6541,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "teller",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ITeller)7534"
      },
      {
        "astId": 6547,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6551,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "purchased",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6553,
        "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
        "label": "killed",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)7204": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IQuasarAuthority)7384": {
        "encoding": "inplace",
        "label": "contract IQuasarAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITeller)7534": {
        "encoding": "inplace",
        "label": "contract ITeller",
        "numberOfBytes": "20"
      },
      "t_enum(STAGE)6516": {
        "encoding": "inplace",
        "label": "enum QuasarIDOBondDepository.STAGE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bond)6537_storage": {
        "encoding": "inplace",
        "label": "struct QuasarIDOBondDepository.Bond",
        "members": [
          {
            "astId": 6518,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "bondId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6520,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)7204"
          },
          {
            "astId": 6522,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6524,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6526,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "priceInUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6528,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "maxPurchase",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6530,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6532,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6534,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "stage",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(STAGE)6516"
          },
          {
            "astId": 6536,
            "contract": "contracts/ido/IDOBondDepository.sol:QuasarIDOBondDepository",
            "label": "initialized",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}